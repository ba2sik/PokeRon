/* tslint:disable */
/* eslint-disable */
/**
 * PokéAPI
 * All the Pokémon data you\'ll ever need in one place, easily accessible through a modern free open-source RESTful API.  ## What is this?  This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.  We\'ve covered everything from Pokémon to Berry Flavors.  ## Where do I start?  We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.  This API will always be publicly available and will never require any extensive setup process to consume.  Created by [**Paul Hallett**(]https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.     
 *
 * The version of the OpenAPI document: 2.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AbilityChange
 */
export interface AbilityChange {
    /**
     * 
     * @type {VersionGroupSummary}
     * @memberof AbilityChange
     */
    'version_group': VersionGroupSummary;
    /**
     * 
     * @type {Array<AbilityChangeEffectText>}
     * @memberof AbilityChange
     */
    'effect_entries': Array<AbilityChangeEffectText>;
}
/**
 * 
 * @export
 * @interface AbilityChangeEffectText
 */
export interface AbilityChangeEffectText {
    /**
     * 
     * @type {string}
     * @memberof AbilityChangeEffectText
     */
    'effect': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof AbilityChangeEffectText
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface AbilityDetail
 */
export interface AbilityDetail {
    /**
     * 
     * @type {number}
     * @memberof AbilityDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof AbilityDetail
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof AbilityDetail
     */
    'is_main_series'?: boolean;
    /**
     * 
     * @type {GenerationSummary}
     * @memberof AbilityDetail
     */
    'generation': GenerationSummary;
    /**
     * 
     * @type {Array<AbilityName>}
     * @memberof AbilityDetail
     */
    'names': Array<AbilityName>;
    /**
     * 
     * @type {Array<AbilityEffectText>}
     * @memberof AbilityDetail
     */
    'effect_entries': Array<AbilityEffectText>;
    /**
     * 
     * @type {Array<AbilityChange>}
     * @memberof AbilityDetail
     */
    'effect_changes': Array<AbilityChange>;
    /**
     * 
     * @type {Array<AbilityFlavorText>}
     * @memberof AbilityDetail
     */
    'flavor_text_entries': Array<AbilityFlavorText>;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInner>}
     * @memberof AbilityDetail
     */
    'pokemon': Array<AbilityDetailPokemonInner>;
}
/**
 * 
 * @export
 * @interface AbilityDetailPokemonInner
 */
export interface AbilityDetailPokemonInner {
    /**
     * 
     * @type {boolean}
     * @memberof AbilityDetailPokemonInner
     */
    'is_hidden': boolean;
    /**
     * 
     * @type {number}
     * @memberof AbilityDetailPokemonInner
     */
    'slot': number;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof AbilityDetailPokemonInner
     */
    'pokemon': AbilityDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface AbilityDetailPokemonInnerPokemon
 */
export interface AbilityDetailPokemonInnerPokemon {
    /**
     * 
     * @type {string}
     * @memberof AbilityDetailPokemonInnerPokemon
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AbilityDetailPokemonInnerPokemon
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface AbilityEffectText
 */
export interface AbilityEffectText {
    /**
     * 
     * @type {string}
     * @memberof AbilityEffectText
     */
    'effect': string;
    /**
     * 
     * @type {string}
     * @memberof AbilityEffectText
     */
    'short_effect': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof AbilityEffectText
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface AbilityFlavorText
 */
export interface AbilityFlavorText {
    /**
     * 
     * @type {string}
     * @memberof AbilityFlavorText
     */
    'flavor_text': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof AbilityFlavorText
     */
    'language': LanguageSummary;
    /**
     * 
     * @type {VersionGroupSummary}
     * @memberof AbilityFlavorText
     */
    'version_group': VersionGroupSummary;
}
/**
 * 
 * @export
 * @interface AbilityName
 */
export interface AbilityName {
    /**
     * 
     * @type {string}
     * @memberof AbilityName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof AbilityName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface AbilitySummary
 */
export interface AbilitySummary {
    /**
     * 
     * @type {string}
     * @memberof AbilitySummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AbilitySummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface BerryDetail
 */
export interface BerryDetail {
    /**
     * 
     * @type {number}
     * @memberof BerryDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof BerryDetail
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof BerryDetail
     */
    'growth_time': number;
    /**
     * 
     * @type {number}
     * @memberof BerryDetail
     */
    'max_harvest': number;
    /**
     * 
     * @type {number}
     * @memberof BerryDetail
     */
    'natural_gift_power': number;
    /**
     * 
     * @type {number}
     * @memberof BerryDetail
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof BerryDetail
     */
    'smoothness': number;
    /**
     * 
     * @type {number}
     * @memberof BerryDetail
     */
    'soil_dryness': number;
    /**
     * 
     * @type {BerryFirmnessSummary}
     * @memberof BerryDetail
     */
    'firmness': BerryFirmnessSummary;
    /**
     * 
     * @type {Array<BerryDetailFlavorsInner>}
     * @memberof BerryDetail
     */
    'flavors': Array<BerryDetailFlavorsInner>;
    /**
     * 
     * @type {ItemSummary}
     * @memberof BerryDetail
     */
    'item': ItemSummary;
    /**
     * 
     * @type {TypeSummary}
     * @memberof BerryDetail
     */
    'natural_gift_type': TypeSummary;
}
/**
 * 
 * @export
 * @interface BerryDetailFlavorsInner
 */
export interface BerryDetailFlavorsInner {
    /**
     * 
     * @type {number}
     * @memberof BerryDetailFlavorsInner
     */
    'potency': number;
    /**
     * 
     * @type {BerryDetailFlavorsInnerFlavor}
     * @memberof BerryDetailFlavorsInner
     */
    'flavor': BerryDetailFlavorsInnerFlavor;
}
/**
 * 
 * @export
 * @interface BerryDetailFlavorsInnerFlavor
 */
export interface BerryDetailFlavorsInnerFlavor {
    /**
     * The name of the flavor
     * @type {string}
     * @memberof BerryDetailFlavorsInnerFlavor
     */
    'name'?: string;
    /**
     * The URL to get more information about the flavor
     * @type {string}
     * @memberof BerryDetailFlavorsInnerFlavor
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface BerryFirmnessDetail
 */
export interface BerryFirmnessDetail {
    /**
     * 
     * @type {number}
     * @memberof BerryFirmnessDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof BerryFirmnessDetail
     */
    'name': string;
    /**
     * 
     * @type {Array<BerrySummary>}
     * @memberof BerryFirmnessDetail
     */
    'berries': Array<BerrySummary>;
    /**
     * 
     * @type {Array<BerryFirmnessName>}
     * @memberof BerryFirmnessDetail
     */
    'names': Array<BerryFirmnessName>;
}
/**
 * 
 * @export
 * @interface BerryFirmnessName
 */
export interface BerryFirmnessName {
    /**
     * 
     * @type {string}
     * @memberof BerryFirmnessName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof BerryFirmnessName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface BerryFirmnessSummary
 */
export interface BerryFirmnessSummary {
    /**
     * 
     * @type {string}
     * @memberof BerryFirmnessSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof BerryFirmnessSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface BerryFlavorDetail
 */
export interface BerryFlavorDetail {
    /**
     * 
     * @type {number}
     * @memberof BerryFlavorDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof BerryFlavorDetail
     */
    'name': string;
    /**
     * 
     * @type {Array<BerryFlavorDetailBerriesInner>}
     * @memberof BerryFlavorDetail
     */
    'berries': Array<BerryFlavorDetailBerriesInner>;
    /**
     * 
     * @type {ContestTypeSummary}
     * @memberof BerryFlavorDetail
     */
    'contest_type': ContestTypeSummary;
    /**
     * 
     * @type {Array<BerryFlavorName>}
     * @memberof BerryFlavorDetail
     */
    'names': Array<BerryFlavorName>;
}
/**
 * 
 * @export
 * @interface BerryFlavorDetailBerriesInner
 */
export interface BerryFlavorDetailBerriesInner {
    /**
     * 
     * @type {number}
     * @memberof BerryFlavorDetailBerriesInner
     */
    'potency': number;
    /**
     * 
     * @type {BerryFlavorDetailBerriesInnerBerry}
     * @memberof BerryFlavorDetailBerriesInner
     */
    'berry': BerryFlavorDetailBerriesInnerBerry;
}
/**
 * 
 * @export
 * @interface BerryFlavorDetailBerriesInnerBerry
 */
export interface BerryFlavorDetailBerriesInnerBerry {
    /**
     * The name of the berry
     * @type {string}
     * @memberof BerryFlavorDetailBerriesInnerBerry
     */
    'name'?: string;
    /**
     * The URL to get more information about the berry
     * @type {string}
     * @memberof BerryFlavorDetailBerriesInnerBerry
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface BerryFlavorName
 */
export interface BerryFlavorName {
    /**
     * 
     * @type {string}
     * @memberof BerryFlavorName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof BerryFlavorName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface BerryFlavorSummary
 */
export interface BerryFlavorSummary {
    /**
     * 
     * @type {string}
     * @memberof BerryFlavorSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof BerryFlavorSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface BerrySummary
 */
export interface BerrySummary {
    /**
     * 
     * @type {string}
     * @memberof BerrySummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof BerrySummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface CharacteristicDescription
 */
export interface CharacteristicDescription {
    /**
     * 
     * @type {string}
     * @memberof CharacteristicDescription
     */
    'description'?: string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof CharacteristicDescription
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface CharacteristicDetail
 */
export interface CharacteristicDetail {
    /**
     * 
     * @type {number}
     * @memberof CharacteristicDetail
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof CharacteristicDetail
     */
    'gene_modulo': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof CharacteristicDetail
     */
    'possible_values': Array<number>;
    /**
     * 
     * @type {StatSummary}
     * @memberof CharacteristicDetail
     */
    'highest_stat': StatSummary;
    /**
     * 
     * @type {Array<CharacteristicDescription>}
     * @memberof CharacteristicDetail
     */
    'descriptions': Array<CharacteristicDescription>;
}
/**
 * 
 * @export
 * @interface CharacteristicSummary
 */
export interface CharacteristicSummary {
    /**
     * 
     * @type {string}
     * @memberof CharacteristicSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface ContestEffectDetail
 */
export interface ContestEffectDetail {
    /**
     * 
     * @type {number}
     * @memberof ContestEffectDetail
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof ContestEffectDetail
     */
    'appeal': number;
    /**
     * 
     * @type {number}
     * @memberof ContestEffectDetail
     */
    'jam': number;
    /**
     * 
     * @type {Array<ContestEffectEffectText>}
     * @memberof ContestEffectDetail
     */
    'effect_entries': Array<ContestEffectEffectText>;
    /**
     * 
     * @type {Array<ContestEffectFlavorText>}
     * @memberof ContestEffectDetail
     */
    'flavor_text_entries': Array<ContestEffectFlavorText>;
}
/**
 * 
 * @export
 * @interface ContestEffectEffectText
 */
export interface ContestEffectEffectText {
    /**
     * 
     * @type {string}
     * @memberof ContestEffectEffectText
     */
    'effect': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof ContestEffectEffectText
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface ContestEffectFlavorText
 */
export interface ContestEffectFlavorText {
    /**
     * 
     * @type {string}
     * @memberof ContestEffectFlavorText
     */
    'flavor_text': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof ContestEffectFlavorText
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface ContestEffectSummary
 */
export interface ContestEffectSummary {
    /**
     * 
     * @type {string}
     * @memberof ContestEffectSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface ContestTypeDetail
 */
export interface ContestTypeDetail {
    /**
     * 
     * @type {number}
     * @memberof ContestTypeDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ContestTypeDetail
     */
    'name': string;
    /**
     * 
     * @type {BerryFlavorSummary}
     * @memberof ContestTypeDetail
     */
    'berry_flavor': BerryFlavorSummary;
    /**
     * 
     * @type {Array<ContestTypeName>}
     * @memberof ContestTypeDetail
     */
    'names': Array<ContestTypeName>;
}
/**
 * 
 * @export
 * @interface ContestTypeName
 */
export interface ContestTypeName {
    /**
     * 
     * @type {string}
     * @memberof ContestTypeName
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ContestTypeName
     */
    'color': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof ContestTypeName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface ContestTypeSummary
 */
export interface ContestTypeSummary {
    /**
     * 
     * @type {string}
     * @memberof ContestTypeSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ContestTypeSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface EggGroupDetail
 */
export interface EggGroupDetail {
    /**
     * 
     * @type {number}
     * @memberof EggGroupDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof EggGroupDetail
     */
    'name': string;
    /**
     * 
     * @type {Array<EggGroupName>}
     * @memberof EggGroupDetail
     */
    'names': Array<EggGroupName>;
    /**
     * 
     * @type {Array<EggGroupDetailPokemonSpeciesInner>}
     * @memberof EggGroupDetail
     */
    'pokemon_species': Array<EggGroupDetailPokemonSpeciesInner>;
}
/**
 * 
 * @export
 * @interface EggGroupDetailPokemonSpeciesInner
 */
export interface EggGroupDetailPokemonSpeciesInner {
    /**
     * Pokemon species name.
     * @type {string}
     * @memberof EggGroupDetailPokemonSpeciesInner
     */
    'name'?: string;
    /**
     * The URL to get more information about the species
     * @type {string}
     * @memberof EggGroupDetailPokemonSpeciesInner
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface EggGroupName
 */
export interface EggGroupName {
    /**
     * 
     * @type {string}
     * @memberof EggGroupName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof EggGroupName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface EggGroupSummary
 */
export interface EggGroupSummary {
    /**
     * 
     * @type {string}
     * @memberof EggGroupSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EggGroupSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface EncounterConditionDetail
 */
export interface EncounterConditionDetail {
    /**
     * 
     * @type {number}
     * @memberof EncounterConditionDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof EncounterConditionDetail
     */
    'name': string;
    /**
     * 
     * @type {Array<EncounterConditionValueSummary>}
     * @memberof EncounterConditionDetail
     */
    'values': Array<EncounterConditionValueSummary>;
    /**
     * 
     * @type {Array<EncounterConditionName>}
     * @memberof EncounterConditionDetail
     */
    'names': Array<EncounterConditionName>;
}
/**
 * 
 * @export
 * @interface EncounterConditionName
 */
export interface EncounterConditionName {
    /**
     * 
     * @type {string}
     * @memberof EncounterConditionName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof EncounterConditionName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface EncounterConditionSummary
 */
export interface EncounterConditionSummary {
    /**
     * 
     * @type {string}
     * @memberof EncounterConditionSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EncounterConditionSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface EncounterConditionValueDetail
 */
export interface EncounterConditionValueDetail {
    /**
     * 
     * @type {number}
     * @memberof EncounterConditionValueDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof EncounterConditionValueDetail
     */
    'name': string;
    /**
     * 
     * @type {EncounterConditionSummary}
     * @memberof EncounterConditionValueDetail
     */
    'condition': EncounterConditionSummary;
    /**
     * 
     * @type {Array<EncounterConditionValueName>}
     * @memberof EncounterConditionValueDetail
     */
    'names': Array<EncounterConditionValueName>;
}
/**
 * 
 * @export
 * @interface EncounterConditionValueName
 */
export interface EncounterConditionValueName {
    /**
     * 
     * @type {string}
     * @memberof EncounterConditionValueName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof EncounterConditionValueName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface EncounterConditionValueSummary
 */
export interface EncounterConditionValueSummary {
    /**
     * 
     * @type {string}
     * @memberof EncounterConditionValueSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EncounterConditionValueSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface EncounterMethodDetail
 */
export interface EncounterMethodDetail {
    /**
     * 
     * @type {number}
     * @memberof EncounterMethodDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof EncounterMethodDetail
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof EncounterMethodDetail
     */
    'order'?: number | null;
    /**
     * 
     * @type {Array<EncounterMethodName>}
     * @memberof EncounterMethodDetail
     */
    'names': Array<EncounterMethodName>;
}
/**
 * 
 * @export
 * @interface EncounterMethodName
 */
export interface EncounterMethodName {
    /**
     * 
     * @type {string}
     * @memberof EncounterMethodName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof EncounterMethodName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface EncounterMethodSummary
 */
export interface EncounterMethodSummary {
    /**
     * 
     * @type {string}
     * @memberof EncounterMethodSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EncounterMethodSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface EvolutionChainDetail
 */
export interface EvolutionChainDetail {
    /**
     * 
     * @type {number}
     * @memberof EvolutionChainDetail
     */
    'id': number;
    /**
     * 
     * @type {ItemSummary}
     * @memberof EvolutionChainDetail
     */
    'baby_trigger_item': ItemSummary;
    /**
     * 
     * @type {EvolutionChainDetailChain}
     * @memberof EvolutionChainDetail
     */
    'chain': EvolutionChainDetailChain;
}
/**
 * 
 * @export
 * @interface EvolutionChainDetailChain
 */
export interface EvolutionChainDetailChain {
    /**
     * 
     * @type {Array<any>}
     * @memberof EvolutionChainDetailChain
     */
    'evolution_details': Array<any>;
    /**
     * 
     * @type {Array<EvolutionChainDetailChainEvolvesToInner>}
     * @memberof EvolutionChainDetailChain
     */
    'evolves_to': Array<EvolutionChainDetailChainEvolvesToInner>;
    /**
     * 
     * @type {boolean}
     * @memberof EvolutionChainDetailChain
     */
    'is_baby': boolean;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof EvolutionChainDetailChain
     */
    'species': AbilityDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface EvolutionChainDetailChainEvolvesToInner
 */
export interface EvolutionChainDetailChainEvolvesToInner {
    /**
     * 
     * @type {Array<EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner>}
     * @memberof EvolutionChainDetailChainEvolvesToInner
     */
    'evolution_details': Array<EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner>;
    /**
     * 
     * @type {boolean}
     * @memberof EvolutionChainDetailChainEvolvesToInner
     */
    'is_baby': boolean;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof EvolutionChainDetailChainEvolvesToInner
     */
    'species': AbilityDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner
 */
export interface EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner {
    /**
     * 
     * @type {EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender}
     * @memberof EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner
     */
    'gender': EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender;
    /**
     * 
     * @type {EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender}
     * @memberof EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner
     */
    'held_item': EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender;
    /**
     * 
     * @type {EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender}
     * @memberof EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner
     */
    'item': EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender;
    /**
     * 
     * @type {object}
     * @memberof EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner
     */
    'known_move': object;
    /**
     * 
     * @type {object}
     * @memberof EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner
     */
    'known_move_type': object;
    /**
     * 
     * @type {EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender}
     * @memberof EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner
     */
    'location': EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender;
    /**
     * 
     * @type {number}
     * @memberof EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner
     */
    'min_affection': number;
    /**
     * 
     * @type {number}
     * @memberof EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner
     */
    'min_beauty': number;
    /**
     * 
     * @type {number}
     * @memberof EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner
     */
    'min_happiness': number;
    /**
     * 
     * @type {number}
     * @memberof EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner
     */
    'min_level': number;
    /**
     * 
     * @type {boolean}
     * @memberof EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner
     */
    'needs_overworld_rain': boolean;
    /**
     * 
     * @type {string}
     * @memberof EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner
     */
    'party_species': string;
    /**
     * 
     * @type {string}
     * @memberof EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner
     */
    'party_type': string;
    /**
     * 
     * @type {string}
     * @memberof EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner
     */
    'relative_physical_stats': string;
    /**
     * 
     * @type {string}
     * @memberof EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner
     */
    'time_of_day': string;
    /**
     * 
     * @type {string}
     * @memberof EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner
     */
    'trade_species': string;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner
     */
    'trigger': AbilityDetailPokemonInnerPokemon;
    /**
     * 
     * @type {boolean}
     * @memberof EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInner
     */
    'turn_upside_down': boolean;
}
/**
 * 
 * @export
 * @interface EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender
 */
export interface EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender {
    /**
     * 
     * @type {string}
     * @memberof EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EvolutionChainDetailChainEvolvesToInnerEvolutionDetailsInnerGender
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface EvolutionChainSummary
 */
export interface EvolutionChainSummary {
    /**
     * 
     * @type {string}
     * @memberof EvolutionChainSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface EvolutionTriggerDetail
 */
export interface EvolutionTriggerDetail {
    /**
     * 
     * @type {number}
     * @memberof EvolutionTriggerDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof EvolutionTriggerDetail
     */
    'name': string;
    /**
     * 
     * @type {Array<EvolutionTriggerName>}
     * @memberof EvolutionTriggerDetail
     */
    'names': Array<EvolutionTriggerName>;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof EvolutionTriggerDetail
     */
    'pokemon_species': Array<AbilityDetailPokemonInnerPokemon>;
}
/**
 * 
 * @export
 * @interface EvolutionTriggerName
 */
export interface EvolutionTriggerName {
    /**
     * 
     * @type {string}
     * @memberof EvolutionTriggerName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof EvolutionTriggerName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface EvolutionTriggerSummary
 */
export interface EvolutionTriggerSummary {
    /**
     * 
     * @type {string}
     * @memberof EvolutionTriggerSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EvolutionTriggerSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface Experience
 */
export interface Experience {
    /**
     * 
     * @type {number}
     * @memberof Experience
     */
    'level': number;
    /**
     * 
     * @type {number}
     * @memberof Experience
     */
    'experience': number;
}
/**
 * 
 * @export
 * @interface GenderDetail
 */
export interface GenderDetail {
    /**
     * 
     * @type {number}
     * @memberof GenderDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof GenderDetail
     */
    'name': string;
    /**
     * 
     * @type {Array<GenderDetailPokemonSpeciesDetailsInner>}
     * @memberof GenderDetail
     */
    'pokemon_species_details': Array<GenderDetailPokemonSpeciesDetailsInner>;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof GenderDetail
     */
    'required_for_evolution': Array<AbilityDetailPokemonInnerPokemon>;
}
/**
 * 
 * @export
 * @interface GenderDetailPokemonSpeciesDetailsInner
 */
export interface GenderDetailPokemonSpeciesDetailsInner {
    /**
     * 
     * @type {number}
     * @memberof GenderDetailPokemonSpeciesDetailsInner
     */
    'rate': number;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof GenderDetailPokemonSpeciesDetailsInner
     */
    'pokemon_species': AbilityDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface GenderSummary
 */
export interface GenderSummary {
    /**
     * 
     * @type {string}
     * @memberof GenderSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GenderSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface GenerationDetail
 */
export interface GenerationDetail {
    /**
     * 
     * @type {number}
     * @memberof GenerationDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof GenerationDetail
     */
    'name': string;
    /**
     * 
     * @type {Array<AbilitySummary>}
     * @memberof GenerationDetail
     */
    'abilities': Array<AbilitySummary>;
    /**
     * 
     * @type {RegionSummary}
     * @memberof GenerationDetail
     */
    'main_region': RegionSummary;
    /**
     * 
     * @type {Array<MoveSummary>}
     * @memberof GenerationDetail
     */
    'moves': Array<MoveSummary>;
    /**
     * 
     * @type {Array<GenerationName>}
     * @memberof GenerationDetail
     */
    'names': Array<GenerationName>;
    /**
     * 
     * @type {Array<PokemonSpeciesSummary>}
     * @memberof GenerationDetail
     */
    'pokemon_species': Array<PokemonSpeciesSummary>;
    /**
     * 
     * @type {Array<TypeSummary>}
     * @memberof GenerationDetail
     */
    'types': Array<TypeSummary>;
    /**
     * 
     * @type {Array<VersionGroupSummary>}
     * @memberof GenerationDetail
     */
    'version_groups': Array<VersionGroupSummary>;
}
/**
 * 
 * @export
 * @interface GenerationName
 */
export interface GenerationName {
    /**
     * 
     * @type {string}
     * @memberof GenerationName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof GenerationName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface GenerationSummary
 */
export interface GenerationSummary {
    /**
     * 
     * @type {string}
     * @memberof GenerationSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GenerationSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface GrowthRateDescription
 */
export interface GrowthRateDescription {
    /**
     * 
     * @type {string}
     * @memberof GrowthRateDescription
     */
    'description'?: string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof GrowthRateDescription
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface GrowthRateDetail
 */
export interface GrowthRateDetail {
    /**
     * 
     * @type {number}
     * @memberof GrowthRateDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof GrowthRateDetail
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GrowthRateDetail
     */
    'formula': string;
    /**
     * 
     * @type {Array<GrowthRateDescription>}
     * @memberof GrowthRateDetail
     */
    'descriptions': Array<GrowthRateDescription>;
    /**
     * 
     * @type {Array<Experience>}
     * @memberof GrowthRateDetail
     */
    'levels': Array<Experience>;
    /**
     * 
     * @type {Array<PokemonSpeciesSummary>}
     * @memberof GrowthRateDetail
     */
    'pokemon_species': Array<PokemonSpeciesSummary>;
}
/**
 * 
 * @export
 * @interface GrowthRateSummary
 */
export interface GrowthRateSummary {
    /**
     * 
     * @type {string}
     * @memberof GrowthRateSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GrowthRateSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface ItemAttributeDescription
 */
export interface ItemAttributeDescription {
    /**
     * 
     * @type {string}
     * @memberof ItemAttributeDescription
     */
    'description'?: string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof ItemAttributeDescription
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface ItemAttributeDetail
 */
export interface ItemAttributeDetail {
    /**
     * 
     * @type {number}
     * @memberof ItemAttributeDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ItemAttributeDetail
     */
    'name': string;
    /**
     * 
     * @type {Array<ItemAttributeDescription>}
     * @memberof ItemAttributeDetail
     */
    'descriptions': Array<ItemAttributeDescription>;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof ItemAttributeDetail
     */
    'items': Array<AbilityDetailPokemonInnerPokemon>;
    /**
     * 
     * @type {Array<ItemAttributeName>}
     * @memberof ItemAttributeDetail
     */
    'names': Array<ItemAttributeName>;
}
/**
 * 
 * @export
 * @interface ItemAttributeName
 */
export interface ItemAttributeName {
    /**
     * 
     * @type {string}
     * @memberof ItemAttributeName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof ItemAttributeName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface ItemAttributeSummary
 */
export interface ItemAttributeSummary {
    /**
     * 
     * @type {string}
     * @memberof ItemAttributeSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ItemAttributeSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface ItemCategoryDetail
 */
export interface ItemCategoryDetail {
    /**
     * 
     * @type {number}
     * @memberof ItemCategoryDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ItemCategoryDetail
     */
    'name': string;
    /**
     * 
     * @type {Array<ItemSummary>}
     * @memberof ItemCategoryDetail
     */
    'items': Array<ItemSummary>;
    /**
     * 
     * @type {Array<ItemCategoryName>}
     * @memberof ItemCategoryDetail
     */
    'names': Array<ItemCategoryName>;
    /**
     * 
     * @type {ItemPocketSummary}
     * @memberof ItemCategoryDetail
     */
    'pocket': ItemPocketSummary;
}
/**
 * 
 * @export
 * @interface ItemCategoryName
 */
export interface ItemCategoryName {
    /**
     * 
     * @type {string}
     * @memberof ItemCategoryName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof ItemCategoryName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface ItemCategorySummary
 */
export interface ItemCategorySummary {
    /**
     * 
     * @type {string}
     * @memberof ItemCategorySummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ItemCategorySummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface ItemDetail
 */
export interface ItemDetail {
    /**
     * 
     * @type {number}
     * @memberof ItemDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ItemDetail
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ItemDetail
     */
    'cost'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ItemDetail
     */
    'fling_power'?: number | null;
    /**
     * 
     * @type {ItemFlingEffectSummary}
     * @memberof ItemDetail
     */
    'fling_effect': ItemFlingEffectSummary;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof ItemDetail
     */
    'attributes': Array<AbilityDetailPokemonInnerPokemon>;
    /**
     * 
     * @type {ItemCategorySummary}
     * @memberof ItemDetail
     */
    'category': ItemCategorySummary;
    /**
     * 
     * @type {Array<ItemEffectText>}
     * @memberof ItemDetail
     */
    'effect_entries': Array<ItemEffectText>;
    /**
     * 
     * @type {Array<ItemFlavorText>}
     * @memberof ItemDetail
     */
    'flavor_text_entries': Array<ItemFlavorText>;
    /**
     * 
     * @type {Array<ItemGameIndex>}
     * @memberof ItemDetail
     */
    'game_indices': Array<ItemGameIndex>;
    /**
     * 
     * @type {Array<ItemName>}
     * @memberof ItemDetail
     */
    'names': Array<ItemName>;
    /**
     * 
     * @type {Array<ItemDetailHeldByPokemonInner>}
     * @memberof ItemDetail
     */
    'held_by_pokemon': Array<ItemDetailHeldByPokemonInner>;
    /**
     * 
     * @type {ItemDetailSprites}
     * @memberof ItemDetail
     */
    'sprites': ItemDetailSprites;
    /**
     * 
     * @type {ItemDetailBabyTriggerFor}
     * @memberof ItemDetail
     */
    'baby_trigger_for': ItemDetailBabyTriggerFor;
    /**
     * 
     * @type {Array<ItemDetailMachinesInner>}
     * @memberof ItemDetail
     */
    'machines': Array<ItemDetailMachinesInner>;
}
/**
 * 
 * @export
 * @interface ItemDetailBabyTriggerFor
 */
export interface ItemDetailBabyTriggerFor {
    /**
     * 
     * @type {string}
     * @memberof ItemDetailBabyTriggerFor
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface ItemDetailHeldByPokemonInner
 */
export interface ItemDetailHeldByPokemonInner {
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof ItemDetailHeldByPokemonInner
     */
    'pokemon': AbilityDetailPokemonInnerPokemon;
    /**
     * 
     * @type {Array<ItemDetailHeldByPokemonInnerVersionDetailsInner>}
     * @memberof ItemDetailHeldByPokemonInner
     */
    'version-details': Array<ItemDetailHeldByPokemonInnerVersionDetailsInner>;
}
/**
 * 
 * @export
 * @interface ItemDetailHeldByPokemonInnerVersionDetailsInner
 */
export interface ItemDetailHeldByPokemonInnerVersionDetailsInner {
    /**
     * 
     * @type {number}
     * @memberof ItemDetailHeldByPokemonInnerVersionDetailsInner
     */
    'rarity': number;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof ItemDetailHeldByPokemonInnerVersionDetailsInner
     */
    'version': AbilityDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface ItemDetailMachinesInner
 */
export interface ItemDetailMachinesInner {
    /**
     * 
     * @type {string}
     * @memberof ItemDetailMachinesInner
     */
    'machine': string;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof ItemDetailMachinesInner
     */
    'version_group': AbilityDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface ItemDetailSprites
 */
export interface ItemDetailSprites {
    /**
     * 
     * @type {string}
     * @memberof ItemDetailSprites
     */
    'default': string;
}
/**
 * 
 * @export
 * @interface ItemEffectText
 */
export interface ItemEffectText {
    /**
     * 
     * @type {string}
     * @memberof ItemEffectText
     */
    'effect': string;
    /**
     * 
     * @type {string}
     * @memberof ItemEffectText
     */
    'short_effect': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof ItemEffectText
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface ItemFlavorText
 */
export interface ItemFlavorText {
    /**
     * 
     * @type {string}
     * @memberof ItemFlavorText
     */
    'text': string;
    /**
     * 
     * @type {VersionGroupSummary}
     * @memberof ItemFlavorText
     */
    'version_group': VersionGroupSummary;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof ItemFlavorText
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface ItemFlingEffectDetail
 */
export interface ItemFlingEffectDetail {
    /**
     * 
     * @type {number}
     * @memberof ItemFlingEffectDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ItemFlingEffectDetail
     */
    'name': string;
    /**
     * 
     * @type {Array<ItemFlingEffectEffectText>}
     * @memberof ItemFlingEffectDetail
     */
    'effect_entries': Array<ItemFlingEffectEffectText>;
    /**
     * 
     * @type {Array<ItemSummary>}
     * @memberof ItemFlingEffectDetail
     */
    'items': Array<ItemSummary>;
}
/**
 * 
 * @export
 * @interface ItemFlingEffectEffectText
 */
export interface ItemFlingEffectEffectText {
    /**
     * 
     * @type {string}
     * @memberof ItemFlingEffectEffectText
     */
    'effect': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof ItemFlingEffectEffectText
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface ItemFlingEffectSummary
 */
export interface ItemFlingEffectSummary {
    /**
     * 
     * @type {string}
     * @memberof ItemFlingEffectSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ItemFlingEffectSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface ItemGameIndex
 */
export interface ItemGameIndex {
    /**
     * 
     * @type {number}
     * @memberof ItemGameIndex
     */
    'game_index': number;
    /**
     * 
     * @type {GenerationSummary}
     * @memberof ItemGameIndex
     */
    'generation': GenerationSummary;
}
/**
 * 
 * @export
 * @interface ItemName
 */
export interface ItemName {
    /**
     * 
     * @type {string}
     * @memberof ItemName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof ItemName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface ItemPocketDetail
 */
export interface ItemPocketDetail {
    /**
     * 
     * @type {number}
     * @memberof ItemPocketDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ItemPocketDetail
     */
    'name': string;
    /**
     * 
     * @type {Array<ItemCategorySummary>}
     * @memberof ItemPocketDetail
     */
    'categories': Array<ItemCategorySummary>;
    /**
     * 
     * @type {Array<ItemPocketName>}
     * @memberof ItemPocketDetail
     */
    'names': Array<ItemPocketName>;
}
/**
 * 
 * @export
 * @interface ItemPocketName
 */
export interface ItemPocketName {
    /**
     * 
     * @type {string}
     * @memberof ItemPocketName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof ItemPocketName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface ItemPocketSummary
 */
export interface ItemPocketSummary {
    /**
     * 
     * @type {string}
     * @memberof ItemPocketSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ItemPocketSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface ItemSummary
 */
export interface ItemSummary {
    /**
     * 
     * @type {string}
     * @memberof ItemSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ItemSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface LanguageDetail
 */
export interface LanguageDetail {
    /**
     * 
     * @type {number}
     * @memberof LanguageDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof LanguageDetail
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof LanguageDetail
     */
    'official'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LanguageDetail
     */
    'iso639': string;
    /**
     * 
     * @type {string}
     * @memberof LanguageDetail
     */
    'iso3166': string;
    /**
     * 
     * @type {Array<LanguageName>}
     * @memberof LanguageDetail
     */
    'names': Array<LanguageName>;
}
/**
 * 
 * @export
 * @interface LanguageName
 */
export interface LanguageName {
    /**
     * 
     * @type {string}
     * @memberof LanguageName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof LanguageName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface LanguageSummary
 */
export interface LanguageSummary {
    /**
     * 
     * @type {string}
     * @memberof LanguageSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof LanguageSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface LocationAreaDetail
 */
export interface LocationAreaDetail {
    /**
     * 
     * @type {number}
     * @memberof LocationAreaDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof LocationAreaDetail
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof LocationAreaDetail
     */
    'game_index': number;
    /**
     * 
     * @type {Array<LocationAreaDetailEncounterMethodRatesInner>}
     * @memberof LocationAreaDetail
     */
    'encounter_method_rates': Array<LocationAreaDetailEncounterMethodRatesInner>;
    /**
     * 
     * @type {LocationSummary}
     * @memberof LocationAreaDetail
     */
    'location': LocationSummary;
    /**
     * 
     * @type {Array<LocationAreaName>}
     * @memberof LocationAreaDetail
     */
    'names': Array<LocationAreaName>;
    /**
     * 
     * @type {Array<LocationAreaDetailPokemonEncountersInner>}
     * @memberof LocationAreaDetail
     */
    'pokemon_encounters': Array<LocationAreaDetailPokemonEncountersInner>;
}
/**
 * 
 * @export
 * @interface LocationAreaDetailEncounterMethodRatesInner
 */
export interface LocationAreaDetailEncounterMethodRatesInner {
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof LocationAreaDetailEncounterMethodRatesInner
     */
    'encounter_method': AbilityDetailPokemonInnerPokemon;
    /**
     * 
     * @type {Array<LocationAreaDetailEncounterMethodRatesInnerVersionDetailsInner>}
     * @memberof LocationAreaDetailEncounterMethodRatesInner
     */
    'version_details': Array<LocationAreaDetailEncounterMethodRatesInnerVersionDetailsInner>;
}
/**
 * 
 * @export
 * @interface LocationAreaDetailEncounterMethodRatesInnerVersionDetailsInner
 */
export interface LocationAreaDetailEncounterMethodRatesInnerVersionDetailsInner {
    /**
     * 
     * @type {number}
     * @memberof LocationAreaDetailEncounterMethodRatesInnerVersionDetailsInner
     */
    'rate': number;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof LocationAreaDetailEncounterMethodRatesInnerVersionDetailsInner
     */
    'version': AbilityDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface LocationAreaDetailPokemonEncountersInner
 */
export interface LocationAreaDetailPokemonEncountersInner {
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof LocationAreaDetailPokemonEncountersInner
     */
    'pokemon': AbilityDetailPokemonInnerPokemon;
    /**
     * 
     * @type {Array<LocationAreaDetailPokemonEncountersInnerVersionDetailsInner>}
     * @memberof LocationAreaDetailPokemonEncountersInner
     */
    'version_details': Array<LocationAreaDetailPokemonEncountersInnerVersionDetailsInner>;
}
/**
 * 
 * @export
 * @interface LocationAreaDetailPokemonEncountersInnerVersionDetailsInner
 */
export interface LocationAreaDetailPokemonEncountersInnerVersionDetailsInner {
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof LocationAreaDetailPokemonEncountersInnerVersionDetailsInner
     */
    'version': AbilityDetailPokemonInnerPokemon;
    /**
     * 
     * @type {number}
     * @memberof LocationAreaDetailPokemonEncountersInnerVersionDetailsInner
     */
    'max_chance': number;
    /**
     * 
     * @type {LocationAreaDetailPokemonEncountersInnerVersionDetailsInnerEncounterDetails}
     * @memberof LocationAreaDetailPokemonEncountersInnerVersionDetailsInner
     */
    'encounter_details': LocationAreaDetailPokemonEncountersInnerVersionDetailsInnerEncounterDetails;
}
/**
 * 
 * @export
 * @interface LocationAreaDetailPokemonEncountersInnerVersionDetailsInnerEncounterDetails
 */
export interface LocationAreaDetailPokemonEncountersInnerVersionDetailsInnerEncounterDetails {
    /**
     * 
     * @type {number}
     * @memberof LocationAreaDetailPokemonEncountersInnerVersionDetailsInnerEncounterDetails
     */
    'min_level': number;
    /**
     * 
     * @type {number}
     * @memberof LocationAreaDetailPokemonEncountersInnerVersionDetailsInnerEncounterDetails
     */
    'max_level': number;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof LocationAreaDetailPokemonEncountersInnerVersionDetailsInnerEncounterDetails
     */
    'condition_values'?: AbilityDetailPokemonInnerPokemon;
    /**
     * 
     * @type {number}
     * @memberof LocationAreaDetailPokemonEncountersInnerVersionDetailsInnerEncounterDetails
     */
    'chance': number;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof LocationAreaDetailPokemonEncountersInnerVersionDetailsInnerEncounterDetails
     */
    'method': AbilityDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface LocationAreaName
 */
export interface LocationAreaName {
    /**
     * 
     * @type {string}
     * @memberof LocationAreaName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof LocationAreaName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface LocationAreaSummary
 */
export interface LocationAreaSummary {
    /**
     * 
     * @type {string}
     * @memberof LocationAreaSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof LocationAreaSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface LocationDetail
 */
export interface LocationDetail {
    /**
     * 
     * @type {number}
     * @memberof LocationDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof LocationDetail
     */
    'name': string;
    /**
     * 
     * @type {RegionSummary}
     * @memberof LocationDetail
     */
    'region': RegionSummary;
    /**
     * 
     * @type {Array<LocationName>}
     * @memberof LocationDetail
     */
    'names': Array<LocationName>;
    /**
     * 
     * @type {Array<LocationGameIndex>}
     * @memberof LocationDetail
     */
    'game_indices': Array<LocationGameIndex>;
    /**
     * 
     * @type {Array<LocationAreaSummary>}
     * @memberof LocationDetail
     */
    'areas': Array<LocationAreaSummary>;
}
/**
 * 
 * @export
 * @interface LocationGameIndex
 */
export interface LocationGameIndex {
    /**
     * 
     * @type {number}
     * @memberof LocationGameIndex
     */
    'game_index': number;
    /**
     * 
     * @type {GenerationSummary}
     * @memberof LocationGameIndex
     */
    'generation': GenerationSummary;
}
/**
 * 
 * @export
 * @interface LocationName
 */
export interface LocationName {
    /**
     * 
     * @type {string}
     * @memberof LocationName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof LocationName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface LocationSummary
 */
export interface LocationSummary {
    /**
     * 
     * @type {string}
     * @memberof LocationSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof LocationSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface MachineDetail
 */
export interface MachineDetail {
    /**
     * 
     * @type {number}
     * @memberof MachineDetail
     */
    'id': number;
    /**
     * 
     * @type {ItemSummary}
     * @memberof MachineDetail
     */
    'item': ItemSummary;
    /**
     * 
     * @type {VersionGroupSummary}
     * @memberof MachineDetail
     */
    'version_group': VersionGroupSummary;
    /**
     * 
     * @type {MoveSummary}
     * @memberof MachineDetail
     */
    'move': MoveSummary;
}
/**
 * 
 * @export
 * @interface MachineSummary
 */
export interface MachineSummary {
    /**
     * 
     * @type {string}
     * @memberof MachineSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface MoveBattleStyleDetail
 */
export interface MoveBattleStyleDetail {
    /**
     * 
     * @type {number}
     * @memberof MoveBattleStyleDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof MoveBattleStyleDetail
     */
    'name': string;
    /**
     * 
     * @type {Array<MoveBattleStyleName>}
     * @memberof MoveBattleStyleDetail
     */
    'names': Array<MoveBattleStyleName>;
}
/**
 * 
 * @export
 * @interface MoveBattleStyleName
 */
export interface MoveBattleStyleName {
    /**
     * 
     * @type {string}
     * @memberof MoveBattleStyleName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof MoveBattleStyleName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface MoveBattleStyleSummary
 */
export interface MoveBattleStyleSummary {
    /**
     * 
     * @type {string}
     * @memberof MoveBattleStyleSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MoveBattleStyleSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface MoveChange
 */
export interface MoveChange {
    /**
     * 
     * @type {number}
     * @memberof MoveChange
     */
    'accuracy'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MoveChange
     */
    'power'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MoveChange
     */
    'pp'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MoveChange
     */
    'effect_chance': number;
    /**
     * 
     * @type {Array<MoveChangeEffectEntriesInner>}
     * @memberof MoveChange
     */
    'effect_entries': Array<MoveChangeEffectEntriesInner>;
    /**
     * 
     * @type {TypeSummary}
     * @memberof MoveChange
     */
    'type': TypeSummary;
    /**
     * 
     * @type {VersionGroupSummary}
     * @memberof MoveChange
     */
    'version_group': VersionGroupSummary;
}
/**
 * 
 * @export
 * @interface MoveChangeEffectEntriesInner
 */
export interface MoveChangeEffectEntriesInner {
    /**
     * 
     * @type {string}
     * @memberof MoveChangeEffectEntriesInner
     */
    'effect': string;
    /**
     * 
     * @type {string}
     * @memberof MoveChangeEffectEntriesInner
     */
    'short_effect': string;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof MoveChangeEffectEntriesInner
     */
    'language': AbilityDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface MoveDamageClassDescription
 */
export interface MoveDamageClassDescription {
    /**
     * 
     * @type {string}
     * @memberof MoveDamageClassDescription
     */
    'description'?: string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof MoveDamageClassDescription
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface MoveDamageClassDetail
 */
export interface MoveDamageClassDetail {
    /**
     * 
     * @type {number}
     * @memberof MoveDamageClassDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof MoveDamageClassDetail
     */
    'name': string;
    /**
     * 
     * @type {Array<MoveDamageClassDescription>}
     * @memberof MoveDamageClassDetail
     */
    'descriptions': Array<MoveDamageClassDescription>;
    /**
     * 
     * @type {Array<MoveSummary>}
     * @memberof MoveDamageClassDetail
     */
    'moves': Array<MoveSummary>;
    /**
     * 
     * @type {Array<MoveDamageClassName>}
     * @memberof MoveDamageClassDetail
     */
    'names': Array<MoveDamageClassName>;
}
/**
 * 
 * @export
 * @interface MoveDamageClassName
 */
export interface MoveDamageClassName {
    /**
     * 
     * @type {string}
     * @memberof MoveDamageClassName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof MoveDamageClassName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface MoveDamageClassSummary
 */
export interface MoveDamageClassSummary {
    /**
     * 
     * @type {string}
     * @memberof MoveDamageClassSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MoveDamageClassSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface MoveDetail
 */
export interface MoveDetail {
    /**
     * 
     * @type {number}
     * @memberof MoveDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof MoveDetail
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof MoveDetail
     */
    'accuracy'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MoveDetail
     */
    'effect_chance': number;
    /**
     * 
     * @type {number}
     * @memberof MoveDetail
     */
    'pp'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MoveDetail
     */
    'priority'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MoveDetail
     */
    'power'?: number | null;
    /**
     * 
     * @type {MoveDetailContestCombos}
     * @memberof MoveDetail
     */
    'contest_combos': MoveDetailContestCombos;
    /**
     * 
     * @type {ContestTypeSummary}
     * @memberof MoveDetail
     */
    'contest_type': ContestTypeSummary;
    /**
     * 
     * @type {ContestEffectSummary}
     * @memberof MoveDetail
     */
    'contest_effect': ContestEffectSummary;
    /**
     * 
     * @type {MoveDamageClassSummary}
     * @memberof MoveDetail
     */
    'damage_class': MoveDamageClassSummary;
    /**
     * 
     * @type {Array<MoveChangeEffectEntriesInner>}
     * @memberof MoveDetail
     */
    'effect_entries': Array<MoveChangeEffectEntriesInner>;
    /**
     * 
     * @type {Array<MoveDetailEffectChangesInner>}
     * @memberof MoveDetail
     */
    'effect_changes': Array<MoveDetailEffectChangesInner>;
    /**
     * 
     * @type {GenerationSummary}
     * @memberof MoveDetail
     */
    'generation': GenerationSummary;
    /**
     * 
     * @type {MoveMeta}
     * @memberof MoveDetail
     */
    'meta': MoveMeta;
    /**
     * 
     * @type {Array<MoveName>}
     * @memberof MoveDetail
     */
    'names': Array<MoveName>;
    /**
     * 
     * @type {Array<MoveChange>}
     * @memberof MoveDetail
     */
    'past_values': Array<MoveChange>;
    /**
     * 
     * @type {Array<MoveDetailStatChangesInner>}
     * @memberof MoveDetail
     */
    'stat_changes': Array<MoveDetailStatChangesInner>;
    /**
     * 
     * @type {SuperContestEffectSummary}
     * @memberof MoveDetail
     */
    'super_contest_effect': SuperContestEffectSummary;
    /**
     * 
     * @type {MoveTargetSummary}
     * @memberof MoveDetail
     */
    'target': MoveTargetSummary;
    /**
     * 
     * @type {TypeSummary}
     * @memberof MoveDetail
     */
    'type': TypeSummary;
    /**
     * 
     * @type {Array<MoveDetailMachinesInner>}
     * @memberof MoveDetail
     */
    'machines': Array<MoveDetailMachinesInner>;
    /**
     * 
     * @type {Array<MoveFlavorText>}
     * @memberof MoveDetail
     */
    'flavor_text_entries': Array<MoveFlavorText>;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof MoveDetail
     */
    'learned_by_pokemon': Array<AbilityDetailPokemonInnerPokemon>;
}
/**
 * 
 * @export
 * @interface MoveDetailContestCombos
 */
export interface MoveDetailContestCombos {
    /**
     * 
     * @type {MoveDetailContestCombosNormal}
     * @memberof MoveDetailContestCombos
     */
    'normal': MoveDetailContestCombosNormal;
    /**
     * 
     * @type {MoveDetailContestCombosNormal}
     * @memberof MoveDetailContestCombos
     */
    'super': MoveDetailContestCombosNormal;
}
/**
 * 
 * @export
 * @interface MoveDetailContestCombosNormal
 */
export interface MoveDetailContestCombosNormal {
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof MoveDetailContestCombosNormal
     */
    'use_before': Array<AbilityDetailPokemonInnerPokemon>;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof MoveDetailContestCombosNormal
     */
    'use_after': Array<AbilityDetailPokemonInnerPokemon>;
}
/**
 * 
 * @export
 * @interface MoveDetailEffectChangesInner
 */
export interface MoveDetailEffectChangesInner {
    /**
     * 
     * @type {Array<MoveDetailEffectChangesInnerEffectEntriesInner>}
     * @memberof MoveDetailEffectChangesInner
     */
    'effect_entries': Array<MoveDetailEffectChangesInnerEffectEntriesInner>;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof MoveDetailEffectChangesInner
     */
    'version_group': AbilityDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface MoveDetailEffectChangesInnerEffectEntriesInner
 */
export interface MoveDetailEffectChangesInnerEffectEntriesInner {
    /**
     * 
     * @type {string}
     * @memberof MoveDetailEffectChangesInnerEffectEntriesInner
     */
    'effect': string;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof MoveDetailEffectChangesInnerEffectEntriesInner
     */
    'language': AbilityDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface MoveDetailMachinesInner
 */
export interface MoveDetailMachinesInner {
    /**
     * 
     * @type {MoveDetailMachinesInnerMachine}
     * @memberof MoveDetailMachinesInner
     */
    'machine': MoveDetailMachinesInnerMachine;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof MoveDetailMachinesInner
     */
    'version_group': AbilityDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface MoveDetailMachinesInnerMachine
 */
export interface MoveDetailMachinesInnerMachine {
    /**
     * 
     * @type {string}
     * @memberof MoveDetailMachinesInnerMachine
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface MoveDetailStatChangesInner
 */
export interface MoveDetailStatChangesInner {
    /**
     * 
     * @type {number}
     * @memberof MoveDetailStatChangesInner
     */
    'change': number;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof MoveDetailStatChangesInner
     */
    'stat': AbilityDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface MoveFlavorText
 */
export interface MoveFlavorText {
    /**
     * 
     * @type {string}
     * @memberof MoveFlavorText
     */
    'flavor_text': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof MoveFlavorText
     */
    'language': LanguageSummary;
    /**
     * 
     * @type {VersionGroupSummary}
     * @memberof MoveFlavorText
     */
    'version_group': VersionGroupSummary;
}
/**
 * 
 * @export
 * @interface MoveLearnMethodDescription
 */
export interface MoveLearnMethodDescription {
    /**
     * 
     * @type {string}
     * @memberof MoveLearnMethodDescription
     */
    'description'?: string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof MoveLearnMethodDescription
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface MoveLearnMethodDetail
 */
export interface MoveLearnMethodDetail {
    /**
     * 
     * @type {number}
     * @memberof MoveLearnMethodDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof MoveLearnMethodDetail
     */
    'name': string;
    /**
     * 
     * @type {Array<MoveLearnMethodName>}
     * @memberof MoveLearnMethodDetail
     */
    'names': Array<MoveLearnMethodName>;
    /**
     * 
     * @type {Array<MoveLearnMethodDescription>}
     * @memberof MoveLearnMethodDetail
     */
    'descriptions': Array<MoveLearnMethodDescription>;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof MoveLearnMethodDetail
     */
    'version_groups': Array<AbilityDetailPokemonInnerPokemon>;
}
/**
 * 
 * @export
 * @interface MoveLearnMethodName
 */
export interface MoveLearnMethodName {
    /**
     * 
     * @type {string}
     * @memberof MoveLearnMethodName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof MoveLearnMethodName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface MoveLearnMethodSummary
 */
export interface MoveLearnMethodSummary {
    /**
     * 
     * @type {string}
     * @memberof MoveLearnMethodSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MoveLearnMethodSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface MoveMeta
 */
export interface MoveMeta {
    /**
     * 
     * @type {MoveMetaAilmentSummary}
     * @memberof MoveMeta
     */
    'ailment': MoveMetaAilmentSummary;
    /**
     * 
     * @type {MoveMetaCategorySummary}
     * @memberof MoveMeta
     */
    'category': MoveMetaCategorySummary;
    /**
     * 
     * @type {number}
     * @memberof MoveMeta
     */
    'min_hits'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MoveMeta
     */
    'max_hits'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MoveMeta
     */
    'min_turns'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MoveMeta
     */
    'max_turns'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MoveMeta
     */
    'drain'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MoveMeta
     */
    'healing'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MoveMeta
     */
    'crit_rate'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MoveMeta
     */
    'ailment_chance'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MoveMeta
     */
    'flinch_chance'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MoveMeta
     */
    'stat_chance'?: number | null;
}
/**
 * 
 * @export
 * @interface MoveMetaAilmentDetail
 */
export interface MoveMetaAilmentDetail {
    /**
     * 
     * @type {number}
     * @memberof MoveMetaAilmentDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof MoveMetaAilmentDetail
     */
    'name': string;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof MoveMetaAilmentDetail
     */
    'moves': Array<AbilityDetailPokemonInnerPokemon>;
    /**
     * 
     * @type {Array<MoveMetaAilmentName>}
     * @memberof MoveMetaAilmentDetail
     */
    'names': Array<MoveMetaAilmentName>;
}
/**
 * 
 * @export
 * @interface MoveMetaAilmentName
 */
export interface MoveMetaAilmentName {
    /**
     * 
     * @type {string}
     * @memberof MoveMetaAilmentName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof MoveMetaAilmentName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface MoveMetaAilmentSummary
 */
export interface MoveMetaAilmentSummary {
    /**
     * 
     * @type {string}
     * @memberof MoveMetaAilmentSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MoveMetaAilmentSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface MoveMetaCategoryDescription
 */
export interface MoveMetaCategoryDescription {
    /**
     * 
     * @type {string}
     * @memberof MoveMetaCategoryDescription
     */
    'description'?: string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof MoveMetaCategoryDescription
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface MoveMetaCategoryDetail
 */
export interface MoveMetaCategoryDetail {
    /**
     * 
     * @type {number}
     * @memberof MoveMetaCategoryDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof MoveMetaCategoryDetail
     */
    'name': string;
    /**
     * 
     * @type {Array<MoveMetaCategoryDescription>}
     * @memberof MoveMetaCategoryDetail
     */
    'descriptions': Array<MoveMetaCategoryDescription>;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof MoveMetaCategoryDetail
     */
    'moves': Array<AbilityDetailPokemonInnerPokemon>;
}
/**
 * 
 * @export
 * @interface MoveMetaCategorySummary
 */
export interface MoveMetaCategorySummary {
    /**
     * 
     * @type {string}
     * @memberof MoveMetaCategorySummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MoveMetaCategorySummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface MoveName
 */
export interface MoveName {
    /**
     * 
     * @type {string}
     * @memberof MoveName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof MoveName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface MoveSummary
 */
export interface MoveSummary {
    /**
     * 
     * @type {string}
     * @memberof MoveSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MoveSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface MoveTargetDescription
 */
export interface MoveTargetDescription {
    /**
     * 
     * @type {string}
     * @memberof MoveTargetDescription
     */
    'description'?: string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof MoveTargetDescription
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface MoveTargetDetail
 */
export interface MoveTargetDetail {
    /**
     * 
     * @type {number}
     * @memberof MoveTargetDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof MoveTargetDetail
     */
    'name': string;
    /**
     * 
     * @type {Array<MoveTargetDescription>}
     * @memberof MoveTargetDetail
     */
    'descriptions': Array<MoveTargetDescription>;
    /**
     * 
     * @type {Array<MoveSummary>}
     * @memberof MoveTargetDetail
     */
    'moves': Array<MoveSummary>;
    /**
     * 
     * @type {Array<MoveTargetName>}
     * @memberof MoveTargetDetail
     */
    'names': Array<MoveTargetName>;
}
/**
 * 
 * @export
 * @interface MoveTargetName
 */
export interface MoveTargetName {
    /**
     * 
     * @type {string}
     * @memberof MoveTargetName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof MoveTargetName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface MoveTargetSummary
 */
export interface MoveTargetSummary {
    /**
     * 
     * @type {string}
     * @memberof MoveTargetSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MoveTargetSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface NatureBattleStylePreference
 */
export interface NatureBattleStylePreference {
    /**
     * 
     * @type {number}
     * @memberof NatureBattleStylePreference
     */
    'low_hp_preference': number;
    /**
     * 
     * @type {number}
     * @memberof NatureBattleStylePreference
     */
    'high_hp_preference': number;
    /**
     * 
     * @type {MoveBattleStyleSummary}
     * @memberof NatureBattleStylePreference
     */
    'move_battle_style': MoveBattleStyleSummary;
}
/**
 * 
 * @export
 * @interface NatureDetail
 */
export interface NatureDetail {
    /**
     * 
     * @type {number}
     * @memberof NatureDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof NatureDetail
     */
    'name': string;
    /**
     * 
     * @type {StatSummary}
     * @memberof NatureDetail
     */
    'decreased_stat': StatSummary;
    /**
     * 
     * @type {StatSummary}
     * @memberof NatureDetail
     */
    'increased_stat': StatSummary;
    /**
     * 
     * @type {BerryFlavorSummary}
     * @memberof NatureDetail
     */
    'likes_flavor': BerryFlavorSummary;
    /**
     * 
     * @type {BerryFlavorSummary}
     * @memberof NatureDetail
     */
    'hates_flavor': BerryFlavorSummary;
    /**
     * 
     * @type {Array<BerrySummary>}
     * @memberof NatureDetail
     */
    'berries': Array<BerrySummary>;
    /**
     * 
     * @type {Array<NatureDetailPokeathlonStatChangesInner>}
     * @memberof NatureDetail
     */
    'pokeathlon_stat_changes': Array<NatureDetailPokeathlonStatChangesInner>;
    /**
     * 
     * @type {Array<NatureBattleStylePreference>}
     * @memberof NatureDetail
     */
    'move_battle_style_preferences': Array<NatureBattleStylePreference>;
    /**
     * 
     * @type {Array<NatureName>}
     * @memberof NatureDetail
     */
    'names': Array<NatureName>;
}
/**
 * 
 * @export
 * @interface NatureDetailPokeathlonStatChangesInner
 */
export interface NatureDetailPokeathlonStatChangesInner {
    /**
     * 
     * @type {number}
     * @memberof NatureDetailPokeathlonStatChangesInner
     */
    'max_change': number;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof NatureDetailPokeathlonStatChangesInner
     */
    'pokeathlon_stat': AbilityDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface NatureName
 */
export interface NatureName {
    /**
     * 
     * @type {string}
     * @memberof NatureName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof NatureName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface NatureSummary
 */
export interface NatureSummary {
    /**
     * 
     * @type {string}
     * @memberof NatureSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof NatureSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface PaginatedAbilitySummaryList
 */
export interface PaginatedAbilitySummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedAbilitySummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedAbilitySummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedAbilitySummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<AbilitySummary>}
     * @memberof PaginatedAbilitySummaryList
     */
    'results'?: Array<AbilitySummary>;
}
/**
 * 
 * @export
 * @interface PaginatedBerryFirmnessSummaryList
 */
export interface PaginatedBerryFirmnessSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedBerryFirmnessSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedBerryFirmnessSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedBerryFirmnessSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<BerryFirmnessSummary>}
     * @memberof PaginatedBerryFirmnessSummaryList
     */
    'results'?: Array<BerryFirmnessSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedBerryFlavorSummaryList
 */
export interface PaginatedBerryFlavorSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedBerryFlavorSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedBerryFlavorSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedBerryFlavorSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<BerryFlavorSummary>}
     * @memberof PaginatedBerryFlavorSummaryList
     */
    'results'?: Array<BerryFlavorSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedBerrySummaryList
 */
export interface PaginatedBerrySummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedBerrySummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedBerrySummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedBerrySummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<BerrySummary>}
     * @memberof PaginatedBerrySummaryList
     */
    'results'?: Array<BerrySummary>;
}
/**
 * 
 * @export
 * @interface PaginatedCharacteristicSummaryList
 */
export interface PaginatedCharacteristicSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedCharacteristicSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCharacteristicSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCharacteristicSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<CharacteristicSummary>}
     * @memberof PaginatedCharacteristicSummaryList
     */
    'results'?: Array<CharacteristicSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedContestEffectSummaryList
 */
export interface PaginatedContestEffectSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedContestEffectSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedContestEffectSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedContestEffectSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<ContestEffectSummary>}
     * @memberof PaginatedContestEffectSummaryList
     */
    'results'?: Array<ContestEffectSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedContestTypeSummaryList
 */
export interface PaginatedContestTypeSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedContestTypeSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedContestTypeSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedContestTypeSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<ContestTypeSummary>}
     * @memberof PaginatedContestTypeSummaryList
     */
    'results'?: Array<ContestTypeSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedEggGroupSummaryList
 */
export interface PaginatedEggGroupSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedEggGroupSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedEggGroupSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedEggGroupSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<EggGroupSummary>}
     * @memberof PaginatedEggGroupSummaryList
     */
    'results'?: Array<EggGroupSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedEncounterConditionSummaryList
 */
export interface PaginatedEncounterConditionSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedEncounterConditionSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedEncounterConditionSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedEncounterConditionSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<EncounterConditionSummary>}
     * @memberof PaginatedEncounterConditionSummaryList
     */
    'results'?: Array<EncounterConditionSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedEncounterConditionValueSummaryList
 */
export interface PaginatedEncounterConditionValueSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedEncounterConditionValueSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedEncounterConditionValueSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedEncounterConditionValueSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<EncounterConditionValueSummary>}
     * @memberof PaginatedEncounterConditionValueSummaryList
     */
    'results'?: Array<EncounterConditionValueSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedEncounterMethodSummaryList
 */
export interface PaginatedEncounterMethodSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedEncounterMethodSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedEncounterMethodSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedEncounterMethodSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<EncounterMethodSummary>}
     * @memberof PaginatedEncounterMethodSummaryList
     */
    'results'?: Array<EncounterMethodSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedEvolutionChainSummaryList
 */
export interface PaginatedEvolutionChainSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedEvolutionChainSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedEvolutionChainSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedEvolutionChainSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<EvolutionChainSummary>}
     * @memberof PaginatedEvolutionChainSummaryList
     */
    'results'?: Array<EvolutionChainSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedEvolutionTriggerSummaryList
 */
export interface PaginatedEvolutionTriggerSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedEvolutionTriggerSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedEvolutionTriggerSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedEvolutionTriggerSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<EvolutionTriggerSummary>}
     * @memberof PaginatedEvolutionTriggerSummaryList
     */
    'results'?: Array<EvolutionTriggerSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedGenderSummaryList
 */
export interface PaginatedGenderSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedGenderSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedGenderSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedGenderSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<GenderSummary>}
     * @memberof PaginatedGenderSummaryList
     */
    'results'?: Array<GenderSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedGenerationSummaryList
 */
export interface PaginatedGenerationSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedGenerationSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedGenerationSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedGenerationSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<GenerationSummary>}
     * @memberof PaginatedGenerationSummaryList
     */
    'results'?: Array<GenerationSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedGrowthRateSummaryList
 */
export interface PaginatedGrowthRateSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedGrowthRateSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedGrowthRateSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedGrowthRateSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<GrowthRateSummary>}
     * @memberof PaginatedGrowthRateSummaryList
     */
    'results'?: Array<GrowthRateSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedItemAttributeSummaryList
 */
export interface PaginatedItemAttributeSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedItemAttributeSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedItemAttributeSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedItemAttributeSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<ItemAttributeSummary>}
     * @memberof PaginatedItemAttributeSummaryList
     */
    'results'?: Array<ItemAttributeSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedItemCategorySummaryList
 */
export interface PaginatedItemCategorySummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedItemCategorySummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedItemCategorySummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedItemCategorySummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<ItemCategorySummary>}
     * @memberof PaginatedItemCategorySummaryList
     */
    'results'?: Array<ItemCategorySummary>;
}
/**
 * 
 * @export
 * @interface PaginatedItemFlingEffectSummaryList
 */
export interface PaginatedItemFlingEffectSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedItemFlingEffectSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedItemFlingEffectSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedItemFlingEffectSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<ItemFlingEffectSummary>}
     * @memberof PaginatedItemFlingEffectSummaryList
     */
    'results'?: Array<ItemFlingEffectSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedItemPocketSummaryList
 */
export interface PaginatedItemPocketSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedItemPocketSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedItemPocketSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedItemPocketSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<ItemPocketSummary>}
     * @memberof PaginatedItemPocketSummaryList
     */
    'results'?: Array<ItemPocketSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedItemSummaryList
 */
export interface PaginatedItemSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedItemSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedItemSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedItemSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<ItemSummary>}
     * @memberof PaginatedItemSummaryList
     */
    'results'?: Array<ItemSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedLanguageSummaryList
 */
export interface PaginatedLanguageSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedLanguageSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedLanguageSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedLanguageSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<LanguageSummary>}
     * @memberof PaginatedLanguageSummaryList
     */
    'results'?: Array<LanguageSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedLocationAreaSummaryList
 */
export interface PaginatedLocationAreaSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedLocationAreaSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedLocationAreaSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedLocationAreaSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<LocationAreaSummary>}
     * @memberof PaginatedLocationAreaSummaryList
     */
    'results'?: Array<LocationAreaSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedLocationSummaryList
 */
export interface PaginatedLocationSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedLocationSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedLocationSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedLocationSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<LocationSummary>}
     * @memberof PaginatedLocationSummaryList
     */
    'results'?: Array<LocationSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedMachineSummaryList
 */
export interface PaginatedMachineSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedMachineSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMachineSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMachineSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<MachineSummary>}
     * @memberof PaginatedMachineSummaryList
     */
    'results'?: Array<MachineSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedMoveBattleStyleSummaryList
 */
export interface PaginatedMoveBattleStyleSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedMoveBattleStyleSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMoveBattleStyleSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMoveBattleStyleSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<MoveBattleStyleSummary>}
     * @memberof PaginatedMoveBattleStyleSummaryList
     */
    'results'?: Array<MoveBattleStyleSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedMoveDamageClassSummaryList
 */
export interface PaginatedMoveDamageClassSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedMoveDamageClassSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMoveDamageClassSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMoveDamageClassSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<MoveDamageClassSummary>}
     * @memberof PaginatedMoveDamageClassSummaryList
     */
    'results'?: Array<MoveDamageClassSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedMoveLearnMethodSummaryList
 */
export interface PaginatedMoveLearnMethodSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedMoveLearnMethodSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMoveLearnMethodSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMoveLearnMethodSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<MoveLearnMethodSummary>}
     * @memberof PaginatedMoveLearnMethodSummaryList
     */
    'results'?: Array<MoveLearnMethodSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedMoveMetaAilmentSummaryList
 */
export interface PaginatedMoveMetaAilmentSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedMoveMetaAilmentSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMoveMetaAilmentSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMoveMetaAilmentSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<MoveMetaAilmentSummary>}
     * @memberof PaginatedMoveMetaAilmentSummaryList
     */
    'results'?: Array<MoveMetaAilmentSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedMoveMetaCategorySummaryList
 */
export interface PaginatedMoveMetaCategorySummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedMoveMetaCategorySummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMoveMetaCategorySummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMoveMetaCategorySummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<MoveMetaCategorySummary>}
     * @memberof PaginatedMoveMetaCategorySummaryList
     */
    'results'?: Array<MoveMetaCategorySummary>;
}
/**
 * 
 * @export
 * @interface PaginatedMoveSummaryList
 */
export interface PaginatedMoveSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedMoveSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMoveSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMoveSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<MoveSummary>}
     * @memberof PaginatedMoveSummaryList
     */
    'results'?: Array<MoveSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedMoveTargetSummaryList
 */
export interface PaginatedMoveTargetSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedMoveTargetSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMoveTargetSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMoveTargetSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<MoveTargetSummary>}
     * @memberof PaginatedMoveTargetSummaryList
     */
    'results'?: Array<MoveTargetSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedNatureSummaryList
 */
export interface PaginatedNatureSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedNatureSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedNatureSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedNatureSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<NatureSummary>}
     * @memberof PaginatedNatureSummaryList
     */
    'results'?: Array<NatureSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedPalParkAreaSummaryList
 */
export interface PaginatedPalParkAreaSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPalParkAreaSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPalParkAreaSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPalParkAreaSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<PalParkAreaSummary>}
     * @memberof PaginatedPalParkAreaSummaryList
     */
    'results'?: Array<PalParkAreaSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedPokeathlonStatSummaryList
 */
export interface PaginatedPokeathlonStatSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPokeathlonStatSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPokeathlonStatSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPokeathlonStatSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<PokeathlonStatSummary>}
     * @memberof PaginatedPokeathlonStatSummaryList
     */
    'results'?: Array<PokeathlonStatSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedPokedexSummaryList
 */
export interface PaginatedPokedexSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPokedexSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPokedexSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPokedexSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<PokedexSummary>}
     * @memberof PaginatedPokedexSummaryList
     */
    'results'?: Array<PokedexSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedPokemonColorSummaryList
 */
export interface PaginatedPokemonColorSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPokemonColorSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPokemonColorSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPokemonColorSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<PokemonColorSummary>}
     * @memberof PaginatedPokemonColorSummaryList
     */
    'results'?: Array<PokemonColorSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedPokemonFormSummaryList
 */
export interface PaginatedPokemonFormSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPokemonFormSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPokemonFormSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPokemonFormSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<PokemonFormSummary>}
     * @memberof PaginatedPokemonFormSummaryList
     */
    'results'?: Array<PokemonFormSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedPokemonHabitatSummaryList
 */
export interface PaginatedPokemonHabitatSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPokemonHabitatSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPokemonHabitatSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPokemonHabitatSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<PokemonHabitatSummary>}
     * @memberof PaginatedPokemonHabitatSummaryList
     */
    'results'?: Array<PokemonHabitatSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedPokemonShapeSummaryList
 */
export interface PaginatedPokemonShapeSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPokemonShapeSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPokemonShapeSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPokemonShapeSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<PokemonShapeSummary>}
     * @memberof PaginatedPokemonShapeSummaryList
     */
    'results'?: Array<PokemonShapeSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedPokemonSpeciesSummaryList
 */
export interface PaginatedPokemonSpeciesSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPokemonSpeciesSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPokemonSpeciesSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPokemonSpeciesSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<PokemonSpeciesSummary>}
     * @memberof PaginatedPokemonSpeciesSummaryList
     */
    'results'?: Array<PokemonSpeciesSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedPokemonSummaryList
 */
export interface PaginatedPokemonSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPokemonSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPokemonSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPokemonSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<PokemonSummary>}
     * @memberof PaginatedPokemonSummaryList
     */
    'results'?: Array<PokemonSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedRegionSummaryList
 */
export interface PaginatedRegionSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedRegionSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedRegionSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedRegionSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<RegionSummary>}
     * @memberof PaginatedRegionSummaryList
     */
    'results'?: Array<RegionSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedStatSummaryList
 */
export interface PaginatedStatSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedStatSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedStatSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedStatSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<StatSummary>}
     * @memberof PaginatedStatSummaryList
     */
    'results'?: Array<StatSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedSuperContestEffectSummaryList
 */
export interface PaginatedSuperContestEffectSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedSuperContestEffectSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSuperContestEffectSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSuperContestEffectSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<SuperContestEffectSummary>}
     * @memberof PaginatedSuperContestEffectSummaryList
     */
    'results'?: Array<SuperContestEffectSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedTypeSummaryList
 */
export interface PaginatedTypeSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedTypeSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedTypeSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedTypeSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<TypeSummary>}
     * @memberof PaginatedTypeSummaryList
     */
    'results'?: Array<TypeSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedVersionGroupSummaryList
 */
export interface PaginatedVersionGroupSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedVersionGroupSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedVersionGroupSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedVersionGroupSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<VersionGroupSummary>}
     * @memberof PaginatedVersionGroupSummaryList
     */
    'results'?: Array<VersionGroupSummary>;
}
/**
 * 
 * @export
 * @interface PaginatedVersionSummaryList
 */
export interface PaginatedVersionSummaryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedVersionSummaryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedVersionSummaryList
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedVersionSummaryList
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<VersionSummary>}
     * @memberof PaginatedVersionSummaryList
     */
    'results'?: Array<VersionSummary>;
}
/**
 * 
 * @export
 * @interface PalParkAreaDetail
 */
export interface PalParkAreaDetail {
    /**
     * 
     * @type {number}
     * @memberof PalParkAreaDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PalParkAreaDetail
     */
    'name': string;
    /**
     * 
     * @type {Array<PalParkAreaName>}
     * @memberof PalParkAreaDetail
     */
    'names': Array<PalParkAreaName>;
    /**
     * 
     * @type {Array<PalParkAreaDetailPokemonEncountersInner>}
     * @memberof PalParkAreaDetail
     */
    'pokemon_encounters': Array<PalParkAreaDetailPokemonEncountersInner>;
}
/**
 * 
 * @export
 * @interface PalParkAreaDetailPokemonEncountersInner
 */
export interface PalParkAreaDetailPokemonEncountersInner {
    /**
     * 
     * @type {number}
     * @memberof PalParkAreaDetailPokemonEncountersInner
     */
    'base_score': number;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof PalParkAreaDetailPokemonEncountersInner
     */
    'pokemon-species': AbilityDetailPokemonInnerPokemon;
    /**
     * 
     * @type {number}
     * @memberof PalParkAreaDetailPokemonEncountersInner
     */
    'rate': number;
}
/**
 * 
 * @export
 * @interface PalParkAreaName
 */
export interface PalParkAreaName {
    /**
     * 
     * @type {string}
     * @memberof PalParkAreaName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof PalParkAreaName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface PalParkAreaSummary
 */
export interface PalParkAreaSummary {
    /**
     * 
     * @type {string}
     * @memberof PalParkAreaSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PalParkAreaSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface PokeathlonStatDetail
 */
export interface PokeathlonStatDetail {
    /**
     * 
     * @type {number}
     * @memberof PokeathlonStatDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PokeathlonStatDetail
     */
    'name': string;
    /**
     * 
     * @type {PokeathlonStatDetailAffectingNatures}
     * @memberof PokeathlonStatDetail
     */
    'affecting_natures': PokeathlonStatDetailAffectingNatures;
    /**
     * 
     * @type {Array<PokeathlonStatName>}
     * @memberof PokeathlonStatDetail
     */
    'names': Array<PokeathlonStatName>;
}
/**
 * 
 * @export
 * @interface PokeathlonStatDetailAffectingNatures
 */
export interface PokeathlonStatDetailAffectingNatures {
    /**
     * 
     * @type {Array<PokeathlonStatDetailAffectingNaturesDecreaseInner>}
     * @memberof PokeathlonStatDetailAffectingNatures
     */
    'decrease': Array<PokeathlonStatDetailAffectingNaturesDecreaseInner>;
    /**
     * 
     * @type {Array<PokeathlonStatDetailAffectingNaturesIncreaseInner>}
     * @memberof PokeathlonStatDetailAffectingNatures
     */
    'increase': Array<PokeathlonStatDetailAffectingNaturesIncreaseInner>;
}
/**
 * 
 * @export
 * @interface PokeathlonStatDetailAffectingNaturesDecreaseInner
 */
export interface PokeathlonStatDetailAffectingNaturesDecreaseInner {
    /**
     * 
     * @type {number}
     * @memberof PokeathlonStatDetailAffectingNaturesDecreaseInner
     */
    'max_change': number;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof PokeathlonStatDetailAffectingNaturesDecreaseInner
     */
    'nature': AbilityDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface PokeathlonStatDetailAffectingNaturesIncreaseInner
 */
export interface PokeathlonStatDetailAffectingNaturesIncreaseInner {
    /**
     * 
     * @type {number}
     * @memberof PokeathlonStatDetailAffectingNaturesIncreaseInner
     */
    'max_change': number;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof PokeathlonStatDetailAffectingNaturesIncreaseInner
     */
    'nature': AbilityDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface PokeathlonStatName
 */
export interface PokeathlonStatName {
    /**
     * 
     * @type {string}
     * @memberof PokeathlonStatName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof PokeathlonStatName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface PokeathlonStatSummary
 */
export interface PokeathlonStatSummary {
    /**
     * 
     * @type {string}
     * @memberof PokeathlonStatSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PokeathlonStatSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface PokedexDescription
 */
export interface PokedexDescription {
    /**
     * 
     * @type {string}
     * @memberof PokedexDescription
     */
    'description'?: string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof PokedexDescription
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface PokedexDetail
 */
export interface PokedexDetail {
    /**
     * 
     * @type {number}
     * @memberof PokedexDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PokedexDetail
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof PokedexDetail
     */
    'is_main_series'?: boolean;
    /**
     * 
     * @type {Array<PokedexDescription>}
     * @memberof PokedexDetail
     */
    'descriptions': Array<PokedexDescription>;
    /**
     * 
     * @type {Array<PokedexName>}
     * @memberof PokedexDetail
     */
    'names': Array<PokedexName>;
    /**
     * 
     * @type {Array<PokedexDetailPokemonEntriesInner>}
     * @memberof PokedexDetail
     */
    'pokemon_entries': Array<PokedexDetailPokemonEntriesInner>;
    /**
     * 
     * @type {RegionSummary}
     * @memberof PokedexDetail
     */
    'region': RegionSummary;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof PokedexDetail
     */
    'version_groups': Array<AbilityDetailPokemonInnerPokemon>;
}
/**
 * 
 * @export
 * @interface PokedexDetailPokemonEntriesInner
 */
export interface PokedexDetailPokemonEntriesInner {
    /**
     * 
     * @type {number}
     * @memberof PokedexDetailPokemonEntriesInner
     */
    'entry_number': number;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof PokedexDetailPokemonEntriesInner
     */
    'pokemon_species': AbilityDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface PokedexName
 */
export interface PokedexName {
    /**
     * 
     * @type {string}
     * @memberof PokedexName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof PokedexName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface PokedexSummary
 */
export interface PokedexSummary {
    /**
     * 
     * @type {string}
     * @memberof PokedexSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PokedexSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface PokemonColorDetail
 */
export interface PokemonColorDetail {
    /**
     * 
     * @type {number}
     * @memberof PokemonColorDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PokemonColorDetail
     */
    'name': string;
    /**
     * 
     * @type {Array<PokemonColorName>}
     * @memberof PokemonColorDetail
     */
    'names': Array<PokemonColorName>;
    /**
     * 
     * @type {Array<PokemonSpeciesSummary>}
     * @memberof PokemonColorDetail
     */
    'pokemon_species': Array<PokemonSpeciesSummary>;
}
/**
 * 
 * @export
 * @interface PokemonColorName
 */
export interface PokemonColorName {
    /**
     * 
     * @type {string}
     * @memberof PokemonColorName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof PokemonColorName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface PokemonColorSummary
 */
export interface PokemonColorSummary {
    /**
     * 
     * @type {string}
     * @memberof PokemonColorSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PokemonColorSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface PokemonDetail
 */
export interface PokemonDetail {
    /**
     * 
     * @type {number}
     * @memberof PokemonDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PokemonDetail
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof PokemonDetail
     */
    'base_experience'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PokemonDetail
     */
    'height'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PokemonDetail
     */
    'is_default'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PokemonDetail
     */
    'order'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PokemonDetail
     */
    'weight'?: number | null;
    /**
     * 
     * @type {Array<PokemonDetailAbilitiesInner>}
     * @memberof PokemonDetail
     */
    'abilities': Array<PokemonDetailAbilitiesInner>;
    /**
     * 
     * @type {Array<PokemonDetailPastAbilitiesInner>}
     * @memberof PokemonDetail
     */
    'past_abilities': Array<PokemonDetailPastAbilitiesInner>;
    /**
     * 
     * @type {Array<PokemonFormSummary>}
     * @memberof PokemonDetail
     */
    'forms': Array<PokemonFormSummary>;
    /**
     * 
     * @type {Array<PokemonGameIndex>}
     * @memberof PokemonDetail
     */
    'game_indices': Array<PokemonGameIndex>;
    /**
     * 
     * @type {PokemonDetailHeldItems}
     * @memberof PokemonDetail
     */
    'held_items': PokemonDetailHeldItems;
    /**
     * 
     * @type {string}
     * @memberof PokemonDetail
     */
    'location_area_encounters': string;
    /**
     * 
     * @type {Array<PokemonDetailMovesInner>}
     * @memberof PokemonDetail
     */
    'moves': Array<PokemonDetailMovesInner>;
    /**
     * 
     * @type {PokemonSpeciesSummary}
     * @memberof PokemonDetail
     */
    'species': PokemonSpeciesSummary;
    /**
     * 
     * @type {PokemonDetailSprites}
     * @memberof PokemonDetail
     */
    'sprites': PokemonDetailSprites;
    /**
     * 
     * @type {PokemonDetailCries}
     * @memberof PokemonDetail
     */
    'cries': PokemonDetailCries;
    /**
     * 
     * @type {Array<PokemonStat>}
     * @memberof PokemonDetail
     */
    'stats': Array<PokemonStat>;
    /**
     * 
     * @type {Array<PokemonDetailTypesInner>}
     * @memberof PokemonDetail
     */
    'types': Array<PokemonDetailTypesInner>;
    /**
     * 
     * @type {Array<PokemonDetailPastTypesInner>}
     * @memberof PokemonDetail
     */
    'past_types': Array<PokemonDetailPastTypesInner>;
}
/**
 * 
 * @export
 * @interface PokemonDetailAbilitiesInner
 */
export interface PokemonDetailAbilitiesInner {
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof PokemonDetailAbilitiesInner
     */
    'ability': AbilityDetailPokemonInnerPokemon;
    /**
     * 
     * @type {boolean}
     * @memberof PokemonDetailAbilitiesInner
     */
    'is_hidden': boolean;
    /**
     * 
     * @type {number}
     * @memberof PokemonDetailAbilitiesInner
     */
    'slot': number;
}
/**
 * 
 * @export
 * @interface PokemonDetailCries
 */
export interface PokemonDetailCries {
    /**
     * 
     * @type {string}
     * @memberof PokemonDetailCries
     */
    'latest': string;
    /**
     * 
     * @type {string}
     * @memberof PokemonDetailCries
     */
    'legacy': string;
}
/**
 * 
 * @export
 * @interface PokemonDetailHeldItems
 */
export interface PokemonDetailHeldItems {
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof PokemonDetailHeldItems
     */
    'item': AbilityDetailPokemonInnerPokemon;
    /**
     * 
     * @type {Array<ItemDetailHeldByPokemonInnerVersionDetailsInner>}
     * @memberof PokemonDetailHeldItems
     */
    'version_details': Array<ItemDetailHeldByPokemonInnerVersionDetailsInner>;
}
/**
 * 
 * @export
 * @interface PokemonDetailMovesInner
 */
export interface PokemonDetailMovesInner {
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof PokemonDetailMovesInner
     */
    'move': AbilityDetailPokemonInnerPokemon;
    /**
     * 
     * @type {Array<PokemonDetailMovesInnerVersionGroupDetailsInner>}
     * @memberof PokemonDetailMovesInner
     */
    'version_group_details': Array<PokemonDetailMovesInnerVersionGroupDetailsInner>;
}
/**
 * 
 * @export
 * @interface PokemonDetailMovesInnerVersionGroupDetailsInner
 */
export interface PokemonDetailMovesInnerVersionGroupDetailsInner {
    /**
     * 
     * @type {number}
     * @memberof PokemonDetailMovesInnerVersionGroupDetailsInner
     */
    'level_learned_at': number;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof PokemonDetailMovesInnerVersionGroupDetailsInner
     */
    'move_learn_method': AbilityDetailPokemonInnerPokemon;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof PokemonDetailMovesInnerVersionGroupDetailsInner
     */
    'version_group': AbilityDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface PokemonDetailPastAbilitiesInner
 */
export interface PokemonDetailPastAbilitiesInner {
    /**
     * 
     * @type {Array<PokemonDetailAbilitiesInner>}
     * @memberof PokemonDetailPastAbilitiesInner
     */
    'abilities': Array<PokemonDetailAbilitiesInner>;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof PokemonDetailPastAbilitiesInner
     */
    'generation': AbilityDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface PokemonDetailPastTypesInner
 */
export interface PokemonDetailPastTypesInner {
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof PokemonDetailPastTypesInner
     */
    'generation': AbilityDetailPokemonInnerPokemon;
    /**
     * 
     * @type {Array<PokemonDetailTypesInner>}
     * @memberof PokemonDetailPastTypesInner
     */
    'types': Array<PokemonDetailTypesInner>;
}
/**
 * 
 * @export
 * @interface PokemonDetailSprites
 */
export interface PokemonDetailSprites {
    [key: string]: string | any;

    /**
     * 
     * @type {string}
     * @memberof PokemonDetailSprites
     */
    'front_default'?: string;
}
/**
 * 
 * @export
 * @interface PokemonDetailTypesInner
 */
export interface PokemonDetailTypesInner {
    /**
     * 
     * @type {number}
     * @memberof PokemonDetailTypesInner
     */
    'slot': number;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof PokemonDetailTypesInner
     */
    'type': AbilityDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface PokemonDexEntry
 */
export interface PokemonDexEntry {
    /**
     * 
     * @type {number}
     * @memberof PokemonDexEntry
     */
    'entry_number': number;
    /**
     * 
     * @type {PokedexSummary}
     * @memberof PokemonDexEntry
     */
    'pokedex': PokedexSummary;
}
/**
 * 
 * @export
 * @interface PokemonEncountersRetrieve200ResponseInner
 */
export interface PokemonEncountersRetrieve200ResponseInner {
    /**
     * 
     * @type {PokemonEncountersRetrieve200ResponseInnerLocationArea}
     * @memberof PokemonEncountersRetrieve200ResponseInner
     */
    'location_area': PokemonEncountersRetrieve200ResponseInnerLocationArea;
    /**
     * 
     * @type {Array<PokemonEncountersRetrieve200ResponseInnerVersionDetailsInner>}
     * @memberof PokemonEncountersRetrieve200ResponseInner
     */
    'version_details': Array<PokemonEncountersRetrieve200ResponseInnerVersionDetailsInner>;
}
/**
 * 
 * @export
 * @interface PokemonEncountersRetrieve200ResponseInnerLocationArea
 */
export interface PokemonEncountersRetrieve200ResponseInnerLocationArea {
    /**
     * 
     * @type {string}
     * @memberof PokemonEncountersRetrieve200ResponseInnerLocationArea
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PokemonEncountersRetrieve200ResponseInnerLocationArea
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface PokemonEncountersRetrieve200ResponseInnerVersionDetailsInner
 */
export interface PokemonEncountersRetrieve200ResponseInnerVersionDetailsInner {
    /**
     * 
     * @type {Array<PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerEncounterDetailsInner>}
     * @memberof PokemonEncountersRetrieve200ResponseInnerVersionDetailsInner
     */
    'encounter_details': Array<PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerEncounterDetailsInner>;
    /**
     * 
     * @type {number}
     * @memberof PokemonEncountersRetrieve200ResponseInnerVersionDetailsInner
     */
    'max_chance': number;
    /**
     * 
     * @type {PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerVersion}
     * @memberof PokemonEncountersRetrieve200ResponseInnerVersionDetailsInner
     */
    'version': PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerVersion;
}
/**
 * 
 * @export
 * @interface PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerEncounterDetailsInner
 */
export interface PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerEncounterDetailsInner {
    /**
     * 
     * @type {number}
     * @memberof PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerEncounterDetailsInner
     */
    'chance': number;
    /**
     * 
     * @type {Array<PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerEncounterDetailsInnerConditionValuesInner>}
     * @memberof PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerEncounterDetailsInner
     */
    'condition_values': Array<PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerEncounterDetailsInnerConditionValuesInner>;
    /**
     * 
     * @type {number}
     * @memberof PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerEncounterDetailsInner
     */
    'max_level': number;
    /**
     * 
     * @type {PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerEncounterDetailsInnerMethod}
     * @memberof PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerEncounterDetailsInner
     */
    'method': PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerEncounterDetailsInnerMethod;
    /**
     * 
     * @type {number}
     * @memberof PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerEncounterDetailsInner
     */
    'min_level': number;
}
/**
 * 
 * @export
 * @interface PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerEncounterDetailsInnerConditionValuesInner
 */
export interface PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerEncounterDetailsInnerConditionValuesInner {
    /**
     * 
     * @type {string}
     * @memberof PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerEncounterDetailsInnerConditionValuesInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerEncounterDetailsInnerConditionValuesInner
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerEncounterDetailsInnerMethod
 */
export interface PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerEncounterDetailsInnerMethod {
    /**
     * 
     * @type {string}
     * @memberof PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerEncounterDetailsInnerMethod
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerEncounterDetailsInnerMethod
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerVersion
 */
export interface PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerVersion {
    /**
     * 
     * @type {string}
     * @memberof PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerVersion
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PokemonEncountersRetrieve200ResponseInnerVersionDetailsInnerVersion
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface PokemonFormDetail
 */
export interface PokemonFormDetail {
    /**
     * 
     * @type {number}
     * @memberof PokemonFormDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PokemonFormDetail
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof PokemonFormDetail
     */
    'order'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PokemonFormDetail
     */
    'form_order'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PokemonFormDetail
     */
    'is_default'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PokemonFormDetail
     */
    'is_battle_only'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PokemonFormDetail
     */
    'is_mega'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PokemonFormDetail
     */
    'form_name': string;
    /**
     * 
     * @type {PokemonSummary}
     * @memberof PokemonFormDetail
     */
    'pokemon': PokemonSummary;
    /**
     * 
     * @type {PokemonFormDetailSprites}
     * @memberof PokemonFormDetail
     */
    'sprites': PokemonFormDetailSprites;
    /**
     * 
     * @type {VersionGroupSummary}
     * @memberof PokemonFormDetail
     */
    'version_group': VersionGroupSummary;
    /**
     * 
     * @type {Array<PokemonFormDetailFormNamesInner>}
     * @memberof PokemonFormDetail
     */
    'form_names': Array<PokemonFormDetailFormNamesInner>;
    /**
     * 
     * @type {Array<PokemonFormDetailFormNamesInner>}
     * @memberof PokemonFormDetail
     */
    'names': Array<PokemonFormDetailFormNamesInner>;
    /**
     * 
     * @type {Array<PokemonDetailTypesInner>}
     * @memberof PokemonFormDetail
     */
    'types': Array<PokemonDetailTypesInner>;
}
/**
 * 
 * @export
 * @interface PokemonFormDetailFormNamesInner
 */
export interface PokemonFormDetailFormNamesInner {
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof PokemonFormDetailFormNamesInner
     */
    'language': AbilityDetailPokemonInnerPokemon;
    /**
     * 
     * @type {string}
     * @memberof PokemonFormDetailFormNamesInner
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface PokemonFormDetailSprites
 */
export interface PokemonFormDetailSprites {
    [key: string]: string | any;

    /**
     * 
     * @type {string}
     * @memberof PokemonFormDetailSprites
     */
    'default'?: string;
}
/**
 * 
 * @export
 * @interface PokemonFormSummary
 */
export interface PokemonFormSummary {
    /**
     * 
     * @type {string}
     * @memberof PokemonFormSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PokemonFormSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface PokemonGameIndex
 */
export interface PokemonGameIndex {
    /**
     * 
     * @type {number}
     * @memberof PokemonGameIndex
     */
    'game_index': number;
    /**
     * 
     * @type {VersionSummary}
     * @memberof PokemonGameIndex
     */
    'version': VersionSummary;
}
/**
 * 
 * @export
 * @interface PokemonHabitatDetail
 */
export interface PokemonHabitatDetail {
    /**
     * 
     * @type {number}
     * @memberof PokemonHabitatDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PokemonHabitatDetail
     */
    'name': string;
    /**
     * 
     * @type {Array<PokemonHabitatName>}
     * @memberof PokemonHabitatDetail
     */
    'names': Array<PokemonHabitatName>;
    /**
     * 
     * @type {Array<PokemonSpeciesSummary>}
     * @memberof PokemonHabitatDetail
     */
    'pokemon_species': Array<PokemonSpeciesSummary>;
}
/**
 * 
 * @export
 * @interface PokemonHabitatName
 */
export interface PokemonHabitatName {
    /**
     * 
     * @type {string}
     * @memberof PokemonHabitatName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof PokemonHabitatName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface PokemonHabitatSummary
 */
export interface PokemonHabitatSummary {
    /**
     * 
     * @type {string}
     * @memberof PokemonHabitatSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PokemonHabitatSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface PokemonShapeDetail
 */
export interface PokemonShapeDetail {
    /**
     * 
     * @type {number}
     * @memberof PokemonShapeDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PokemonShapeDetail
     */
    'name': string;
    /**
     * 
     * @type {Array<PokemonShapeDetailAwesomeNamesInner>}
     * @memberof PokemonShapeDetail
     */
    'awesome_names': Array<PokemonShapeDetailAwesomeNamesInner>;
    /**
     * 
     * @type {Array<PokemonShapeDetailNamesInner>}
     * @memberof PokemonShapeDetail
     */
    'names': Array<PokemonShapeDetailNamesInner>;
    /**
     * 
     * @type {Array<PokemonSpeciesSummary>}
     * @memberof PokemonShapeDetail
     */
    'pokemon_species': Array<PokemonSpeciesSummary>;
}
/**
 * 
 * @export
 * @interface PokemonShapeDetailAwesomeNamesInner
 */
export interface PokemonShapeDetailAwesomeNamesInner {
    /**
     * 
     * @type {string}
     * @memberof PokemonShapeDetailAwesomeNamesInner
     */
    'awesome_name': string;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof PokemonShapeDetailAwesomeNamesInner
     */
    'language': AbilityDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface PokemonShapeDetailNamesInner
 */
export interface PokemonShapeDetailNamesInner {
    /**
     * 
     * @type {string}
     * @memberof PokemonShapeDetailNamesInner
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof PokemonShapeDetailNamesInner
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface PokemonShapeSummary
 */
export interface PokemonShapeSummary {
    /**
     * 
     * @type {string}
     * @memberof PokemonShapeSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PokemonShapeSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface PokemonSpeciesDescription
 */
export interface PokemonSpeciesDescription {
    /**
     * 
     * @type {string}
     * @memberof PokemonSpeciesDescription
     */
    'description'?: string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof PokemonSpeciesDescription
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface PokemonSpeciesDetail
 */
export interface PokemonSpeciesDetail {
    /**
     * 
     * @type {number}
     * @memberof PokemonSpeciesDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PokemonSpeciesDetail
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof PokemonSpeciesDetail
     */
    'order'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PokemonSpeciesDetail
     */
    'gender_rate'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PokemonSpeciesDetail
     */
    'capture_rate'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PokemonSpeciesDetail
     */
    'base_happiness'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PokemonSpeciesDetail
     */
    'is_baby'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PokemonSpeciesDetail
     */
    'is_legendary'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PokemonSpeciesDetail
     */
    'is_mythical'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PokemonSpeciesDetail
     */
    'hatch_counter'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PokemonSpeciesDetail
     */
    'has_gender_differences'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PokemonSpeciesDetail
     */
    'forms_switchable'?: boolean;
    /**
     * 
     * @type {GrowthRateSummary}
     * @memberof PokemonSpeciesDetail
     */
    'growth_rate': GrowthRateSummary;
    /**
     * 
     * @type {Array<PokemonDexEntry>}
     * @memberof PokemonSpeciesDetail
     */
    'pokedex_numbers': Array<PokemonDexEntry>;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof PokemonSpeciesDetail
     */
    'egg_groups': Array<AbilityDetailPokemonInnerPokemon>;
    /**
     * 
     * @type {PokemonColorSummary}
     * @memberof PokemonSpeciesDetail
     */
    'color': PokemonColorSummary;
    /**
     * 
     * @type {PokemonShapeSummary}
     * @memberof PokemonSpeciesDetail
     */
    'shape': PokemonShapeSummary;
    /**
     * 
     * @type {PokemonSpeciesSummary}
     * @memberof PokemonSpeciesDetail
     */
    'evolves_from_species': PokemonSpeciesSummary;
    /**
     * 
     * @type {EvolutionChainSummary}
     * @memberof PokemonSpeciesDetail
     */
    'evolution_chain': EvolutionChainSummary;
    /**
     * 
     * @type {PokemonHabitatSummary}
     * @memberof PokemonSpeciesDetail
     */
    'habitat': PokemonHabitatSummary;
    /**
     * 
     * @type {GenerationSummary}
     * @memberof PokemonSpeciesDetail
     */
    'generation': GenerationSummary;
    /**
     * 
     * @type {Array<PokemonFormDetailFormNamesInner>}
     * @memberof PokemonSpeciesDetail
     */
    'names': Array<PokemonFormDetailFormNamesInner>;
    /**
     * 
     * @type {Array<PokemonSpeciesDetailPalParkEncountersInner>}
     * @memberof PokemonSpeciesDetail
     */
    'pal_park_encounters': Array<PokemonSpeciesDetailPalParkEncountersInner>;
    /**
     * 
     * @type {Array<PokemonSpeciesDescription>}
     * @memberof PokemonSpeciesDetail
     */
    'form_descriptions': Array<PokemonSpeciesDescription>;
    /**
     * 
     * @type {Array<PokemonSpeciesFlavorText>}
     * @memberof PokemonSpeciesDetail
     */
    'flavor_text_entries': Array<PokemonSpeciesFlavorText>;
    /**
     * 
     * @type {Array<PokemonSpeciesDetailGeneraInner>}
     * @memberof PokemonSpeciesDetail
     */
    'genera': Array<PokemonSpeciesDetailGeneraInner>;
    /**
     * 
     * @type {Array<PokemonSpeciesDetailVarietiesInner>}
     * @memberof PokemonSpeciesDetail
     */
    'varieties': Array<PokemonSpeciesDetailVarietiesInner>;
}
/**
 * 
 * @export
 * @interface PokemonSpeciesDetailGeneraInner
 */
export interface PokemonSpeciesDetailGeneraInner {
    /**
     * 
     * @type {string}
     * @memberof PokemonSpeciesDetailGeneraInner
     */
    'genus': string;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof PokemonSpeciesDetailGeneraInner
     */
    'language': AbilityDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface PokemonSpeciesDetailPalParkEncountersInner
 */
export interface PokemonSpeciesDetailPalParkEncountersInner {
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof PokemonSpeciesDetailPalParkEncountersInner
     */
    'area': AbilityDetailPokemonInnerPokemon;
    /**
     * 
     * @type {number}
     * @memberof PokemonSpeciesDetailPalParkEncountersInner
     */
    'base_score': number;
    /**
     * 
     * @type {number}
     * @memberof PokemonSpeciesDetailPalParkEncountersInner
     */
    'rate': number;
}
/**
 * 
 * @export
 * @interface PokemonSpeciesDetailVarietiesInner
 */
export interface PokemonSpeciesDetailVarietiesInner {
    /**
     * 
     * @type {boolean}
     * @memberof PokemonSpeciesDetailVarietiesInner
     */
    'is_default': boolean;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof PokemonSpeciesDetailVarietiesInner
     */
    'pokemon': AbilityDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface PokemonSpeciesFlavorText
 */
export interface PokemonSpeciesFlavorText {
    /**
     * 
     * @type {string}
     * @memberof PokemonSpeciesFlavorText
     */
    'flavor_text': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof PokemonSpeciesFlavorText
     */
    'language': LanguageSummary;
    /**
     * 
     * @type {VersionSummary}
     * @memberof PokemonSpeciesFlavorText
     */
    'version': VersionSummary;
}
/**
 * 
 * @export
 * @interface PokemonSpeciesSummary
 */
export interface PokemonSpeciesSummary {
    /**
     * 
     * @type {string}
     * @memberof PokemonSpeciesSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PokemonSpeciesSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface PokemonStat
 */
export interface PokemonStat {
    /**
     * 
     * @type {number}
     * @memberof PokemonStat
     */
    'base_stat': number;
    /**
     * 
     * @type {number}
     * @memberof PokemonStat
     */
    'effort': number;
    /**
     * 
     * @type {StatSummary}
     * @memberof PokemonStat
     */
    'stat': StatSummary;
}
/**
 * 
 * @export
 * @interface PokemonSummary
 */
export interface PokemonSummary {
    /**
     * 
     * @type {string}
     * @memberof PokemonSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PokemonSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface RegionDetail
 */
export interface RegionDetail {
    /**
     * 
     * @type {number}
     * @memberof RegionDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof RegionDetail
     */
    'name': string;
    /**
     * 
     * @type {Array<LocationSummary>}
     * @memberof RegionDetail
     */
    'locations': Array<LocationSummary>;
    /**
     * 
     * @type {GenerationSummary}
     * @memberof RegionDetail
     */
    'main_generation': GenerationSummary;
    /**
     * 
     * @type {Array<RegionName>}
     * @memberof RegionDetail
     */
    'names': Array<RegionName>;
    /**
     * 
     * @type {Array<PokedexSummary>}
     * @memberof RegionDetail
     */
    'pokedexes': Array<PokedexSummary>;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof RegionDetail
     */
    'version_groups': Array<AbilityDetailPokemonInnerPokemon>;
}
/**
 * 
 * @export
 * @interface RegionName
 */
export interface RegionName {
    /**
     * 
     * @type {string}
     * @memberof RegionName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof RegionName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface RegionSummary
 */
export interface RegionSummary {
    /**
     * 
     * @type {string}
     * @memberof RegionSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof RegionSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface StatDetail
 */
export interface StatDetail {
    /**
     * 
     * @type {number}
     * @memberof StatDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof StatDetail
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof StatDetail
     */
    'game_index': number;
    /**
     * 
     * @type {boolean}
     * @memberof StatDetail
     */
    'is_battle_only'?: boolean;
    /**
     * 
     * @type {StatDetailAffectingMoves}
     * @memberof StatDetail
     */
    'affecting_moves': StatDetailAffectingMoves;
    /**
     * 
     * @type {StatDetailAffectingNatures}
     * @memberof StatDetail
     */
    'affecting_natures': StatDetailAffectingNatures;
    /**
     * 
     * @type {Array<CharacteristicSummary>}
     * @memberof StatDetail
     */
    'characteristics': Array<CharacteristicSummary>;
    /**
     * 
     * @type {MoveDamageClassSummary}
     * @memberof StatDetail
     */
    'move_damage_class': MoveDamageClassSummary;
    /**
     * 
     * @type {Array<StatName>}
     * @memberof StatDetail
     */
    'names': Array<StatName>;
}
/**
 * 
 * @export
 * @interface StatDetailAffectingMoves
 */
export interface StatDetailAffectingMoves {
    /**
     * 
     * @type {Array<StatDetailAffectingMovesIncreaseInner>}
     * @memberof StatDetailAffectingMoves
     */
    'increase': Array<StatDetailAffectingMovesIncreaseInner>;
    /**
     * 
     * @type {Array<StatDetailAffectingMovesIncreaseInner>}
     * @memberof StatDetailAffectingMoves
     */
    'decrease': Array<StatDetailAffectingMovesIncreaseInner>;
}
/**
 * 
 * @export
 * @interface StatDetailAffectingMovesIncreaseInner
 */
export interface StatDetailAffectingMovesIncreaseInner {
    /**
     * 
     * @type {number}
     * @memberof StatDetailAffectingMovesIncreaseInner
     */
    'change': number;
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof StatDetailAffectingMovesIncreaseInner
     */
    'move': AbilityDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface StatDetailAffectingNatures
 */
export interface StatDetailAffectingNatures {
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof StatDetailAffectingNatures
     */
    'increase': Array<AbilityDetailPokemonInnerPokemon>;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof StatDetailAffectingNatures
     */
    'decrease': Array<AbilityDetailPokemonInnerPokemon>;
}
/**
 * 
 * @export
 * @interface StatName
 */
export interface StatName {
    /**
     * 
     * @type {string}
     * @memberof StatName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof StatName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface StatSummary
 */
export interface StatSummary {
    /**
     * 
     * @type {string}
     * @memberof StatSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof StatSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface SuperContestEffectDetail
 */
export interface SuperContestEffectDetail {
    /**
     * 
     * @type {number}
     * @memberof SuperContestEffectDetail
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof SuperContestEffectDetail
     */
    'appeal': number;
    /**
     * 
     * @type {Array<SuperContestEffectFlavorText>}
     * @memberof SuperContestEffectDetail
     */
    'flavor_text_entries': Array<SuperContestEffectFlavorText>;
    /**
     * 
     * @type {Array<MoveSummary>}
     * @memberof SuperContestEffectDetail
     */
    'moves': Array<MoveSummary>;
}
/**
 * 
 * @export
 * @interface SuperContestEffectFlavorText
 */
export interface SuperContestEffectFlavorText {
    /**
     * 
     * @type {string}
     * @memberof SuperContestEffectFlavorText
     */
    'flavor_text': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof SuperContestEffectFlavorText
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface SuperContestEffectSummary
 */
export interface SuperContestEffectSummary {
    /**
     * 
     * @type {string}
     * @memberof SuperContestEffectSummary
     */
    'url': string;
}
/**
 * Serializer for the Type resource
 * @export
 * @interface TypeDetail
 */
export interface TypeDetail {
    /**
     * 
     * @type {number}
     * @memberof TypeDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof TypeDetail
     */
    'name': string;
    /**
     * 
     * @type {TypeDetailDamageRelations}
     * @memberof TypeDetail
     */
    'damage_relations': TypeDetailDamageRelations;
    /**
     * 
     * @type {Array<TypeDetailPastDamageRelationsInner>}
     * @memberof TypeDetail
     */
    'past_damage_relations': Array<TypeDetailPastDamageRelationsInner>;
    /**
     * 
     * @type {Array<TypeGameIndex>}
     * @memberof TypeDetail
     */
    'game_indices': Array<TypeGameIndex>;
    /**
     * 
     * @type {GenerationSummary}
     * @memberof TypeDetail
     */
    'generation': GenerationSummary;
    /**
     * 
     * @type {MoveDamageClassSummary}
     * @memberof TypeDetail
     */
    'move_damage_class': MoveDamageClassSummary;
    /**
     * 
     * @type {Array<AbilityName>}
     * @memberof TypeDetail
     */
    'names': Array<AbilityName>;
    /**
     * 
     * @type {Array<TypeDetailPokemonInner>}
     * @memberof TypeDetail
     */
    'pokemon': Array<TypeDetailPokemonInner>;
    /**
     * 
     * @type {Array<MoveSummary>}
     * @memberof TypeDetail
     */
    'moves': Array<MoveSummary>;
}
/**
 * 
 * @export
 * @interface TypeDetailDamageRelations
 */
export interface TypeDetailDamageRelations {
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof TypeDetailDamageRelations
     */
    'no_damage_to': Array<AbilityDetailPokemonInnerPokemon>;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof TypeDetailDamageRelations
     */
    'half_damage_to': Array<AbilityDetailPokemonInnerPokemon>;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof TypeDetailDamageRelations
     */
    'double_damage_to': Array<AbilityDetailPokemonInnerPokemon>;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof TypeDetailDamageRelations
     */
    'no_damage_from': Array<AbilityDetailPokemonInnerPokemon>;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof TypeDetailDamageRelations
     */
    'half_damage_from': Array<AbilityDetailPokemonInnerPokemon>;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof TypeDetailDamageRelations
     */
    'double_damage_from': Array<AbilityDetailPokemonInnerPokemon>;
}
/**
 * 
 * @export
 * @interface TypeDetailPastDamageRelationsInner
 */
export interface TypeDetailPastDamageRelationsInner {
    /**
     * 
     * @type {AbilityDetailPokemonInnerPokemon}
     * @memberof TypeDetailPastDamageRelationsInner
     */
    'generation': AbilityDetailPokemonInnerPokemon;
    /**
     * 
     * @type {TypeDetailPastDamageRelationsInnerDamageRelations}
     * @memberof TypeDetailPastDamageRelationsInner
     */
    'damage_relations': TypeDetailPastDamageRelationsInnerDamageRelations;
}
/**
 * 
 * @export
 * @interface TypeDetailPastDamageRelationsInnerDamageRelations
 */
export interface TypeDetailPastDamageRelationsInnerDamageRelations {
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof TypeDetailPastDamageRelationsInnerDamageRelations
     */
    'no_damage_to': Array<AbilityDetailPokemonInnerPokemon>;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof TypeDetailPastDamageRelationsInnerDamageRelations
     */
    'half_damage_to': Array<AbilityDetailPokemonInnerPokemon>;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof TypeDetailPastDamageRelationsInnerDamageRelations
     */
    'double_damage_to': Array<AbilityDetailPokemonInnerPokemon>;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof TypeDetailPastDamageRelationsInnerDamageRelations
     */
    'no_damage_from': Array<AbilityDetailPokemonInnerPokemon>;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof TypeDetailPastDamageRelationsInnerDamageRelations
     */
    'half_damage_from': Array<AbilityDetailPokemonInnerPokemon>;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof TypeDetailPastDamageRelationsInnerDamageRelations
     */
    'double_damage_from': Array<AbilityDetailPokemonInnerPokemon>;
}
/**
 * 
 * @export
 * @interface TypeDetailPokemonInner
 */
export interface TypeDetailPokemonInner {
    /**
     * 
     * @type {number}
     * @memberof TypeDetailPokemonInner
     */
    'slot'?: number;
    /**
     * 
     * @type {TypeDetailPokemonInnerPokemon}
     * @memberof TypeDetailPokemonInner
     */
    'pokemon'?: TypeDetailPokemonInnerPokemon;
}
/**
 * 
 * @export
 * @interface TypeDetailPokemonInnerPokemon
 */
export interface TypeDetailPokemonInnerPokemon {
    /**
     * The name of the pokemon
     * @type {string}
     * @memberof TypeDetailPokemonInnerPokemon
     */
    'name'?: string;
    /**
     * The URL to get more information about the pokemon
     * @type {string}
     * @memberof TypeDetailPokemonInnerPokemon
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface TypeGameIndex
 */
export interface TypeGameIndex {
    /**
     * 
     * @type {number}
     * @memberof TypeGameIndex
     */
    'game_index': number;
    /**
     * 
     * @type {GenerationSummary}
     * @memberof TypeGameIndex
     */
    'generation': GenerationSummary;
}
/**
 * 
 * @export
 * @interface TypeSummary
 */
export interface TypeSummary {
    /**
     * 
     * @type {string}
     * @memberof TypeSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TypeSummary
     */
    'url': string;
}
/**
 * Should have a link to Version Group info but the Circular dependency and compilation order fight eachother and I\'m not sure how to add anything other than a hyperlink
 * @export
 * @interface VersionDetail
 */
export interface VersionDetail {
    /**
     * 
     * @type {number}
     * @memberof VersionDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof VersionDetail
     */
    'name': string;
    /**
     * 
     * @type {Array<VersionName>}
     * @memberof VersionDetail
     */
    'names': Array<VersionName>;
    /**
     * 
     * @type {VersionGroupSummary}
     * @memberof VersionDetail
     */
    'version_group': VersionGroupSummary;
}
/**
 * 
 * @export
 * @interface VersionGroupDetail
 */
export interface VersionGroupDetail {
    /**
     * 
     * @type {number}
     * @memberof VersionGroupDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof VersionGroupDetail
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof VersionGroupDetail
     */
    'order'?: number | null;
    /**
     * 
     * @type {GenerationSummary}
     * @memberof VersionGroupDetail
     */
    'generation': GenerationSummary;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof VersionGroupDetail
     */
    'move_learn_methods': Array<AbilityDetailPokemonInnerPokemon>;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof VersionGroupDetail
     */
    'pokedexes': Array<AbilityDetailPokemonInnerPokemon>;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof VersionGroupDetail
     */
    'regions': Array<AbilityDetailPokemonInnerPokemon>;
    /**
     * 
     * @type {Array<VersionSummary>}
     * @memberof VersionGroupDetail
     */
    'versions': Array<VersionSummary>;
}
/**
 * 
 * @export
 * @interface VersionGroupSummary
 */
export interface VersionGroupSummary {
    /**
     * 
     * @type {string}
     * @memberof VersionGroupSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof VersionGroupSummary
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface VersionName
 */
export interface VersionName {
    /**
     * 
     * @type {string}
     * @memberof VersionName
     */
    'name': string;
    /**
     * 
     * @type {LanguageSummary}
     * @memberof VersionName
     */
    'language': LanguageSummary;
}
/**
 * 
 * @export
 * @interface VersionSummary
 */
export interface VersionSummary {
    /**
     * 
     * @type {string}
     * @memberof VersionSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof VersionSummary
     */
    'url': string;
}

/**
 * BerriesApi - axios parameter creator
 * @export
 */
export const BerriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Berries can be soft or hard. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Category:Berries_by_firmness) for greater detail.
         * @summary List berry firmness
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        berryFirmnessList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/berry-firmness/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Berries can be soft or hard. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Category:Berries_by_firmness) for greater detail.
         * @summary Get berry by firmness
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        berryFirmnessRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('berryFirmnessRetrieve', 'id', id)
            const localVarPath = `/api/v2/berry-firmness/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Flavors determine whether a Pokémon will benefit or suffer from eating a berry based on their **nature**. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Flavor) for greater detail.
         * @summary List berry flavors
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        berryFlavorList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/berry-flavor/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Flavors determine whether a Pokémon will benefit or suffer from eating a berry based on their **nature**. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Flavor) for greater detail.
         * @summary Get berries by flavor
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        berryFlavorRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('berryFlavorRetrieve', 'id', id)
            const localVarPath = `/api/v2/berry-flavor/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Berries are small fruits that can provide HP and status condition restoration, stat enhancement, and even damage negation when eaten by Pokémon. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Berry) for greater detail.
         * @summary List berries
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        berryList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/berry/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Berries are small fruits that can provide HP and status condition restoration, stat enhancement, and even damage negation when eaten by Pokémon. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Berry) for greater detail.
         * @summary Get a berry
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        berryRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('berryRetrieve', 'id', id)
            const localVarPath = `/api/v2/berry/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BerriesApi - functional programming interface
 * @export
 */
export const BerriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BerriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Berries can be soft or hard. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Category:Berries_by_firmness) for greater detail.
         * @summary List berry firmness
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async berryFirmnessList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedBerryFirmnessSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.berryFirmnessList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BerriesApi.berryFirmnessList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Berries can be soft or hard. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Category:Berries_by_firmness) for greater detail.
         * @summary Get berry by firmness
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async berryFirmnessRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BerryFirmnessDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.berryFirmnessRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BerriesApi.berryFirmnessRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Flavors determine whether a Pokémon will benefit or suffer from eating a berry based on their **nature**. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Flavor) for greater detail.
         * @summary List berry flavors
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async berryFlavorList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedBerryFlavorSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.berryFlavorList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BerriesApi.berryFlavorList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Flavors determine whether a Pokémon will benefit or suffer from eating a berry based on their **nature**. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Flavor) for greater detail.
         * @summary Get berries by flavor
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async berryFlavorRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BerryFlavorDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.berryFlavorRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BerriesApi.berryFlavorRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Berries are small fruits that can provide HP and status condition restoration, stat enhancement, and even damage negation when eaten by Pokémon. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Berry) for greater detail.
         * @summary List berries
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async berryList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedBerrySummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.berryList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BerriesApi.berryList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Berries are small fruits that can provide HP and status condition restoration, stat enhancement, and even damage negation when eaten by Pokémon. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Berry) for greater detail.
         * @summary Get a berry
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async berryRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BerryDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.berryRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BerriesApi.berryRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BerriesApi - factory interface
 * @export
 */
export const BerriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BerriesApiFp(configuration)
    return {
        /**
         * Berries can be soft or hard. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Category:Berries_by_firmness) for greater detail.
         * @summary List berry firmness
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        berryFirmnessList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedBerryFirmnessSummaryList> {
            return localVarFp.berryFirmnessList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Berries can be soft or hard. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Category:Berries_by_firmness) for greater detail.
         * @summary Get berry by firmness
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        berryFirmnessRetrieve(id: string, options?: any): AxiosPromise<BerryFirmnessDetail> {
            return localVarFp.berryFirmnessRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Flavors determine whether a Pokémon will benefit or suffer from eating a berry based on their **nature**. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Flavor) for greater detail.
         * @summary List berry flavors
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        berryFlavorList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedBerryFlavorSummaryList> {
            return localVarFp.berryFlavorList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Flavors determine whether a Pokémon will benefit or suffer from eating a berry based on their **nature**. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Flavor) for greater detail.
         * @summary Get berries by flavor
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        berryFlavorRetrieve(id: string, options?: any): AxiosPromise<BerryFlavorDetail> {
            return localVarFp.berryFlavorRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Berries are small fruits that can provide HP and status condition restoration, stat enhancement, and even damage negation when eaten by Pokémon. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Berry) for greater detail.
         * @summary List berries
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        berryList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedBerrySummaryList> {
            return localVarFp.berryList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Berries are small fruits that can provide HP and status condition restoration, stat enhancement, and even damage negation when eaten by Pokémon. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Berry) for greater detail.
         * @summary Get a berry
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        berryRetrieve(id: string, options?: any): AxiosPromise<BerryDetail> {
            return localVarFp.berryRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BerriesApi - object-oriented interface
 * @export
 * @class BerriesApi
 * @extends {BaseAPI}
 */
export class BerriesApi extends BaseAPI {
    /**
     * Berries can be soft or hard. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Category:Berries_by_firmness) for greater detail.
     * @summary List berry firmness
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BerriesApi
     */
    public berryFirmnessList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return BerriesApiFp(this.configuration).berryFirmnessList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Berries can be soft or hard. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Category:Berries_by_firmness) for greater detail.
     * @summary Get berry by firmness
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BerriesApi
     */
    public berryFirmnessRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return BerriesApiFp(this.configuration).berryFirmnessRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Flavors determine whether a Pokémon will benefit or suffer from eating a berry based on their **nature**. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Flavor) for greater detail.
     * @summary List berry flavors
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BerriesApi
     */
    public berryFlavorList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return BerriesApiFp(this.configuration).berryFlavorList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Flavors determine whether a Pokémon will benefit or suffer from eating a berry based on their **nature**. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Flavor) for greater detail.
     * @summary Get berries by flavor
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BerriesApi
     */
    public berryFlavorRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return BerriesApiFp(this.configuration).berryFlavorRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Berries are small fruits that can provide HP and status condition restoration, stat enhancement, and even damage negation when eaten by Pokémon. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Berry) for greater detail.
     * @summary List berries
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BerriesApi
     */
    public berryList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return BerriesApiFp(this.configuration).berryList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Berries are small fruits that can provide HP and status condition restoration, stat enhancement, and even damage negation when eaten by Pokémon. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Berry) for greater detail.
     * @summary Get a berry
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BerriesApi
     */
    public berryRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return BerriesApiFp(this.configuration).berryRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ContestsApi - axios parameter creator
 * @export
 */
export const ContestsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Contest effects refer to the effects of moves when used in contests.
         * @summary List contest effects
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contestEffectList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/contest-effect/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Contest effects refer to the effects of moves when used in contests.
         * @summary Get contest effect
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contestEffectRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contestEffectRetrieve', 'id', id)
            const localVarPath = `/api/v2/contest-effect/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Contest types are categories judges used to weigh a Pokémon\'s condition in Pokémon contests. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Contest_condition) for greater detail.
         * @summary List contest types
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contestTypeList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/contest-type/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Contest types are categories judges used to weigh a Pokémon\'s condition in Pokémon contests. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Contest_condition) for greater detail.
         * @summary Get contest type
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contestTypeRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contestTypeRetrieve', 'id', id)
            const localVarPath = `/api/v2/contest-type/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Super contest effects refer to the effects of moves when used in super contests.
         * @summary List super contest effects
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        superContestEffectList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/super-contest-effect/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Super contest effects refer to the effects of moves when used in super contests.
         * @summary Get super contest effect
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        superContestEffectRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('superContestEffectRetrieve', 'id', id)
            const localVarPath = `/api/v2/super-contest-effect/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContestsApi - functional programming interface
 * @export
 */
export const ContestsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContestsApiAxiosParamCreator(configuration)
    return {
        /**
         * Contest effects refer to the effects of moves when used in contests.
         * @summary List contest effects
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contestEffectList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedContestEffectSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contestEffectList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContestsApi.contestEffectList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Contest effects refer to the effects of moves when used in contests.
         * @summary Get contest effect
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contestEffectRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContestEffectDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contestEffectRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContestsApi.contestEffectRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Contest types are categories judges used to weigh a Pokémon\'s condition in Pokémon contests. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Contest_condition) for greater detail.
         * @summary List contest types
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contestTypeList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedContestTypeSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contestTypeList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContestsApi.contestTypeList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Contest types are categories judges used to weigh a Pokémon\'s condition in Pokémon contests. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Contest_condition) for greater detail.
         * @summary Get contest type
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contestTypeRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContestTypeDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contestTypeRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContestsApi.contestTypeRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Super contest effects refer to the effects of moves when used in super contests.
         * @summary List super contest effects
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async superContestEffectList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedSuperContestEffectSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.superContestEffectList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContestsApi.superContestEffectList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Super contest effects refer to the effects of moves when used in super contests.
         * @summary Get super contest effect
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async superContestEffectRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuperContestEffectDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.superContestEffectRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContestsApi.superContestEffectRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContestsApi - factory interface
 * @export
 */
export const ContestsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContestsApiFp(configuration)
    return {
        /**
         * Contest effects refer to the effects of moves when used in contests.
         * @summary List contest effects
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contestEffectList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedContestEffectSummaryList> {
            return localVarFp.contestEffectList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Contest effects refer to the effects of moves when used in contests.
         * @summary Get contest effect
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contestEffectRetrieve(id: string, options?: any): AxiosPromise<ContestEffectDetail> {
            return localVarFp.contestEffectRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Contest types are categories judges used to weigh a Pokémon\'s condition in Pokémon contests. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Contest_condition) for greater detail.
         * @summary List contest types
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contestTypeList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedContestTypeSummaryList> {
            return localVarFp.contestTypeList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Contest types are categories judges used to weigh a Pokémon\'s condition in Pokémon contests. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Contest_condition) for greater detail.
         * @summary Get contest type
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contestTypeRetrieve(id: string, options?: any): AxiosPromise<ContestTypeDetail> {
            return localVarFp.contestTypeRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Super contest effects refer to the effects of moves when used in super contests.
         * @summary List super contest effects
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        superContestEffectList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedSuperContestEffectSummaryList> {
            return localVarFp.superContestEffectList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Super contest effects refer to the effects of moves when used in super contests.
         * @summary Get super contest effect
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        superContestEffectRetrieve(id: string, options?: any): AxiosPromise<SuperContestEffectDetail> {
            return localVarFp.superContestEffectRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContestsApi - object-oriented interface
 * @export
 * @class ContestsApi
 * @extends {BaseAPI}
 */
export class ContestsApi extends BaseAPI {
    /**
     * Contest effects refer to the effects of moves when used in contests.
     * @summary List contest effects
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContestsApi
     */
    public contestEffectList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return ContestsApiFp(this.configuration).contestEffectList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Contest effects refer to the effects of moves when used in contests.
     * @summary Get contest effect
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContestsApi
     */
    public contestEffectRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return ContestsApiFp(this.configuration).contestEffectRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Contest types are categories judges used to weigh a Pokémon\'s condition in Pokémon contests. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Contest_condition) for greater detail.
     * @summary List contest types
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContestsApi
     */
    public contestTypeList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return ContestsApiFp(this.configuration).contestTypeList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Contest types are categories judges used to weigh a Pokémon\'s condition in Pokémon contests. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Contest_condition) for greater detail.
     * @summary Get contest type
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContestsApi
     */
    public contestTypeRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return ContestsApiFp(this.configuration).contestTypeRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Super contest effects refer to the effects of moves when used in super contests.
     * @summary List super contest effects
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContestsApi
     */
    public superContestEffectList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return ContestsApiFp(this.configuration).superContestEffectList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Super contest effects refer to the effects of moves when used in super contests.
     * @summary Get super contest effect
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContestsApi
     */
    public superContestEffectRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return ContestsApiFp(this.configuration).superContestEffectRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EncountersApi - axios parameter creator
 * @export
 */
export const EncountersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Conditions which affect what pokemon might appear in the wild, e.g., day or night.
         * @summary List encounter conditions
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encounterConditionList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/encounter-condition/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Conditions which affect what pokemon might appear in the wild, e.g., day or night.
         * @summary Get encounter condition
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encounterConditionRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('encounterConditionRetrieve', 'id', id)
            const localVarPath = `/api/v2/encounter-condition/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Encounter condition values are the various states that an encounter condition can have, i.e., time of day can be either day or night.
         * @summary List encounter condition values
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encounterConditionValueList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/encounter-condition-value/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Encounter condition values are the various states that an encounter condition can have, i.e., time of day can be either day or night.
         * @summary Get encounter condition value
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encounterConditionValueRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('encounterConditionValueRetrieve', 'id', id)
            const localVarPath = `/api/v2/encounter-condition-value/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Methods by which the player might can encounter Pokémon in the wild, e.g., walking in tall grass. Check out Bulbapedia for greater detail.
         * @summary List encounter methods
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encounterMethodList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/encounter-method/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Methods by which the player might can encounter Pokémon in the wild, e.g., walking in tall grass. Check out Bulbapedia for greater detail.
         * @summary Get encounter method
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encounterMethodRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('encounterMethodRetrieve', 'id', id)
            const localVarPath = `/api/v2/encounter-method/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Handles Pokemon Encounters as a sub-resource.
         * @summary Get pokemon encounter
         * @param {string} pokemonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonEncountersRetrieve: async (pokemonId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pokemonId' is not null or undefined
            assertParamExists('pokemonEncountersRetrieve', 'pokemonId', pokemonId)
            const localVarPath = `/api/v2/pokemon/{pokemon_id}/encounters`
                .replace(`{${"pokemon_id"}}`, encodeURIComponent(String(pokemonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EncountersApi - functional programming interface
 * @export
 */
export const EncountersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EncountersApiAxiosParamCreator(configuration)
    return {
        /**
         * Conditions which affect what pokemon might appear in the wild, e.g., day or night.
         * @summary List encounter conditions
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encounterConditionList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedEncounterConditionSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.encounterConditionList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EncountersApi.encounterConditionList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Conditions which affect what pokemon might appear in the wild, e.g., day or night.
         * @summary Get encounter condition
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encounterConditionRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EncounterConditionDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.encounterConditionRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EncountersApi.encounterConditionRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Encounter condition values are the various states that an encounter condition can have, i.e., time of day can be either day or night.
         * @summary List encounter condition values
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encounterConditionValueList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedEncounterConditionValueSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.encounterConditionValueList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EncountersApi.encounterConditionValueList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Encounter condition values are the various states that an encounter condition can have, i.e., time of day can be either day or night.
         * @summary Get encounter condition value
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encounterConditionValueRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EncounterConditionValueDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.encounterConditionValueRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EncountersApi.encounterConditionValueRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Methods by which the player might can encounter Pokémon in the wild, e.g., walking in tall grass. Check out Bulbapedia for greater detail.
         * @summary List encounter methods
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encounterMethodList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedEncounterMethodSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.encounterMethodList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EncountersApi.encounterMethodList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Methods by which the player might can encounter Pokémon in the wild, e.g., walking in tall grass. Check out Bulbapedia for greater detail.
         * @summary Get encounter method
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encounterMethodRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EncounterMethodDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.encounterMethodRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EncountersApi.encounterMethodRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Handles Pokemon Encounters as a sub-resource.
         * @summary Get pokemon encounter
         * @param {string} pokemonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pokemonEncountersRetrieve(pokemonId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PokemonEncountersRetrieve200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pokemonEncountersRetrieve(pokemonId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EncountersApi.pokemonEncountersRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EncountersApi - factory interface
 * @export
 */
export const EncountersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EncountersApiFp(configuration)
    return {
        /**
         * Conditions which affect what pokemon might appear in the wild, e.g., day or night.
         * @summary List encounter conditions
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encounterConditionList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedEncounterConditionSummaryList> {
            return localVarFp.encounterConditionList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Conditions which affect what pokemon might appear in the wild, e.g., day or night.
         * @summary Get encounter condition
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encounterConditionRetrieve(id: string, options?: any): AxiosPromise<EncounterConditionDetail> {
            return localVarFp.encounterConditionRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Encounter condition values are the various states that an encounter condition can have, i.e., time of day can be either day or night.
         * @summary List encounter condition values
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encounterConditionValueList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedEncounterConditionValueSummaryList> {
            return localVarFp.encounterConditionValueList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Encounter condition values are the various states that an encounter condition can have, i.e., time of day can be either day or night.
         * @summary Get encounter condition value
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encounterConditionValueRetrieve(id: string, options?: any): AxiosPromise<EncounterConditionValueDetail> {
            return localVarFp.encounterConditionValueRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Methods by which the player might can encounter Pokémon in the wild, e.g., walking in tall grass. Check out Bulbapedia for greater detail.
         * @summary List encounter methods
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encounterMethodList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedEncounterMethodSummaryList> {
            return localVarFp.encounterMethodList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Methods by which the player might can encounter Pokémon in the wild, e.g., walking in tall grass. Check out Bulbapedia for greater detail.
         * @summary Get encounter method
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encounterMethodRetrieve(id: string, options?: any): AxiosPromise<EncounterMethodDetail> {
            return localVarFp.encounterMethodRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Handles Pokemon Encounters as a sub-resource.
         * @summary Get pokemon encounter
         * @param {string} pokemonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonEncountersRetrieve(pokemonId: string, options?: any): AxiosPromise<Array<PokemonEncountersRetrieve200ResponseInner>> {
            return localVarFp.pokemonEncountersRetrieve(pokemonId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EncountersApi - object-oriented interface
 * @export
 * @class EncountersApi
 * @extends {BaseAPI}
 */
export class EncountersApi extends BaseAPI {
    /**
     * Conditions which affect what pokemon might appear in the wild, e.g., day or night.
     * @summary List encounter conditions
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncountersApi
     */
    public encounterConditionList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return EncountersApiFp(this.configuration).encounterConditionList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Conditions which affect what pokemon might appear in the wild, e.g., day or night.
     * @summary Get encounter condition
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncountersApi
     */
    public encounterConditionRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return EncountersApiFp(this.configuration).encounterConditionRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Encounter condition values are the various states that an encounter condition can have, i.e., time of day can be either day or night.
     * @summary List encounter condition values
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncountersApi
     */
    public encounterConditionValueList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return EncountersApiFp(this.configuration).encounterConditionValueList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Encounter condition values are the various states that an encounter condition can have, i.e., time of day can be either day or night.
     * @summary Get encounter condition value
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncountersApi
     */
    public encounterConditionValueRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return EncountersApiFp(this.configuration).encounterConditionValueRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Methods by which the player might can encounter Pokémon in the wild, e.g., walking in tall grass. Check out Bulbapedia for greater detail.
     * @summary List encounter methods
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncountersApi
     */
    public encounterMethodList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return EncountersApiFp(this.configuration).encounterMethodList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Methods by which the player might can encounter Pokémon in the wild, e.g., walking in tall grass. Check out Bulbapedia for greater detail.
     * @summary Get encounter method
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncountersApi
     */
    public encounterMethodRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return EncountersApiFp(this.configuration).encounterMethodRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Handles Pokemon Encounters as a sub-resource.
     * @summary Get pokemon encounter
     * @param {string} pokemonId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncountersApi
     */
    public pokemonEncountersRetrieve(pokemonId: string, options?: RawAxiosRequestConfig) {
        return EncountersApiFp(this.configuration).pokemonEncountersRetrieve(pokemonId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EvolutionApi - axios parameter creator
 * @export
 */
export const EvolutionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Evolution chains are essentially family trees. They start with the lowest stage within a family and detail evolution conditions for each as well as Pokémon they can evolve into up through the hierarchy.
         * @summary List evolution chains
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evolutionChainList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/evolution-chain/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Evolution chains are essentially family trees. They start with the lowest stage within a family and detail evolution conditions for each as well as Pokémon they can evolve into up through the hierarchy.
         * @summary Get evolution chain
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evolutionChainRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('evolutionChainRetrieve', 'id', id)
            const localVarPath = `/api/v2/evolution-chain/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Evolution triggers are the events and conditions that cause a Pokémon to evolve. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Methods_of_evolution) for greater detail.
         * @summary List evolution triggers
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evolutionTriggerList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/evolution-trigger/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Evolution triggers are the events and conditions that cause a Pokémon to evolve. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Methods_of_evolution) for greater detail.
         * @summary Get evolution trigger
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evolutionTriggerRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('evolutionTriggerRetrieve', 'id', id)
            const localVarPath = `/api/v2/evolution-trigger/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EvolutionApi - functional programming interface
 * @export
 */
export const EvolutionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EvolutionApiAxiosParamCreator(configuration)
    return {
        /**
         * Evolution chains are essentially family trees. They start with the lowest stage within a family and detail evolution conditions for each as well as Pokémon they can evolve into up through the hierarchy.
         * @summary List evolution chains
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evolutionChainList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedEvolutionChainSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.evolutionChainList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EvolutionApi.evolutionChainList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Evolution chains are essentially family trees. They start with the lowest stage within a family and detail evolution conditions for each as well as Pokémon they can evolve into up through the hierarchy.
         * @summary Get evolution chain
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evolutionChainRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EvolutionChainDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.evolutionChainRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EvolutionApi.evolutionChainRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Evolution triggers are the events and conditions that cause a Pokémon to evolve. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Methods_of_evolution) for greater detail.
         * @summary List evolution triggers
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evolutionTriggerList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedEvolutionTriggerSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.evolutionTriggerList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EvolutionApi.evolutionTriggerList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Evolution triggers are the events and conditions that cause a Pokémon to evolve. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Methods_of_evolution) for greater detail.
         * @summary Get evolution trigger
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evolutionTriggerRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EvolutionTriggerDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.evolutionTriggerRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EvolutionApi.evolutionTriggerRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EvolutionApi - factory interface
 * @export
 */
export const EvolutionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EvolutionApiFp(configuration)
    return {
        /**
         * Evolution chains are essentially family trees. They start with the lowest stage within a family and detail evolution conditions for each as well as Pokémon they can evolve into up through the hierarchy.
         * @summary List evolution chains
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evolutionChainList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedEvolutionChainSummaryList> {
            return localVarFp.evolutionChainList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Evolution chains are essentially family trees. They start with the lowest stage within a family and detail evolution conditions for each as well as Pokémon they can evolve into up through the hierarchy.
         * @summary Get evolution chain
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evolutionChainRetrieve(id: string, options?: any): AxiosPromise<EvolutionChainDetail> {
            return localVarFp.evolutionChainRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Evolution triggers are the events and conditions that cause a Pokémon to evolve. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Methods_of_evolution) for greater detail.
         * @summary List evolution triggers
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evolutionTriggerList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedEvolutionTriggerSummaryList> {
            return localVarFp.evolutionTriggerList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Evolution triggers are the events and conditions that cause a Pokémon to evolve. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Methods_of_evolution) for greater detail.
         * @summary Get evolution trigger
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evolutionTriggerRetrieve(id: string, options?: any): AxiosPromise<EvolutionTriggerDetail> {
            return localVarFp.evolutionTriggerRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EvolutionApi - object-oriented interface
 * @export
 * @class EvolutionApi
 * @extends {BaseAPI}
 */
export class EvolutionApi extends BaseAPI {
    /**
     * Evolution chains are essentially family trees. They start with the lowest stage within a family and detail evolution conditions for each as well as Pokémon they can evolve into up through the hierarchy.
     * @summary List evolution chains
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvolutionApi
     */
    public evolutionChainList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return EvolutionApiFp(this.configuration).evolutionChainList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Evolution chains are essentially family trees. They start with the lowest stage within a family and detail evolution conditions for each as well as Pokémon they can evolve into up through the hierarchy.
     * @summary Get evolution chain
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvolutionApi
     */
    public evolutionChainRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return EvolutionApiFp(this.configuration).evolutionChainRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Evolution triggers are the events and conditions that cause a Pokémon to evolve. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Methods_of_evolution) for greater detail.
     * @summary List evolution triggers
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvolutionApi
     */
    public evolutionTriggerList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return EvolutionApiFp(this.configuration).evolutionTriggerList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Evolution triggers are the events and conditions that cause a Pokémon to evolve. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Methods_of_evolution) for greater detail.
     * @summary Get evolution trigger
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvolutionApi
     */
    public evolutionTriggerRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return EvolutionApiFp(this.configuration).evolutionTriggerRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GamesApi - axios parameter creator
 * @export
 */
export const GamesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A generation is a grouping of the Pokémon games that separates them based on the Pokémon they include. In each generation, a new set of Pokémon, Moves, Abilities and Types that did not exist in the previous generation are released.
         * @summary List genrations
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generationList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/generation/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A generation is a grouping of the Pokémon games that separates them based on the Pokémon they include. In each generation, a new set of Pokémon, Moves, Abilities and Types that did not exist in the previous generation are released.
         * @summary Get genration
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generationRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('generationRetrieve', 'id', id)
            const localVarPath = `/api/v2/generation/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A Pokédex is a handheld electronic encyclopedia device; one which is capable of recording and retaining information of the various Pokémon in a given region with the exception of the national dex and some smaller dexes related to portions of a region. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pokedex) for greater detail.
         * @summary List pokedex
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokedexList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/pokedex/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A Pokédex is a handheld electronic encyclopedia device; one which is capable of recording and retaining information of the various Pokémon in a given region with the exception of the national dex and some smaller dexes related to portions of a region. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pokedex) for greater detail.
         * @summary Get pokedex
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokedexRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pokedexRetrieve', 'id', id)
            const localVarPath = `/api/v2/pokedex/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Version groups categorize highly similar versions of the games.
         * @summary List version groups
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGroupList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/version-group/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Version groups categorize highly similar versions of the games.
         * @summary Get version group
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGroupRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('versionGroupRetrieve', 'id', id)
            const localVarPath = `/api/v2/version-group/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Versions of the games, e.g., Red, Blue or Yellow.
         * @summary List versions
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/version/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Versions of the games, e.g., Red, Blue or Yellow.
         * @summary Get version
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('versionRetrieve', 'id', id)
            const localVarPath = `/api/v2/version/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GamesApi - functional programming interface
 * @export
 */
export const GamesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GamesApiAxiosParamCreator(configuration)
    return {
        /**
         * A generation is a grouping of the Pokémon games that separates them based on the Pokémon they include. In each generation, a new set of Pokémon, Moves, Abilities and Types that did not exist in the previous generation are released.
         * @summary List genrations
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generationList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedGenerationSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generationList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GamesApi.generationList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * A generation is a grouping of the Pokémon games that separates them based on the Pokémon they include. In each generation, a new set of Pokémon, Moves, Abilities and Types that did not exist in the previous generation are released.
         * @summary Get genration
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generationRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerationDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generationRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GamesApi.generationRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * A Pokédex is a handheld electronic encyclopedia device; one which is capable of recording and retaining information of the various Pokémon in a given region with the exception of the national dex and some smaller dexes related to portions of a region. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pokedex) for greater detail.
         * @summary List pokedex
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pokedexList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPokedexSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pokedexList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GamesApi.pokedexList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * A Pokédex is a handheld electronic encyclopedia device; one which is capable of recording and retaining information of the various Pokémon in a given region with the exception of the national dex and some smaller dexes related to portions of a region. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pokedex) for greater detail.
         * @summary Get pokedex
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pokedexRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PokedexDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pokedexRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GamesApi.pokedexRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Version groups categorize highly similar versions of the games.
         * @summary List version groups
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async versionGroupList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedVersionGroupSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.versionGroupList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GamesApi.versionGroupList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Version groups categorize highly similar versions of the games.
         * @summary Get version group
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async versionGroupRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionGroupDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.versionGroupRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GamesApi.versionGroupRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Versions of the games, e.g., Red, Blue or Yellow.
         * @summary List versions
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async versionList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedVersionSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.versionList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GamesApi.versionList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Versions of the games, e.g., Red, Blue or Yellow.
         * @summary Get version
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async versionRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.versionRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GamesApi.versionRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GamesApi - factory interface
 * @export
 */
export const GamesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GamesApiFp(configuration)
    return {
        /**
         * A generation is a grouping of the Pokémon games that separates them based on the Pokémon they include. In each generation, a new set of Pokémon, Moves, Abilities and Types that did not exist in the previous generation are released.
         * @summary List genrations
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generationList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedGenerationSummaryList> {
            return localVarFp.generationList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * A generation is a grouping of the Pokémon games that separates them based on the Pokémon they include. In each generation, a new set of Pokémon, Moves, Abilities and Types that did not exist in the previous generation are released.
         * @summary Get genration
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generationRetrieve(id: string, options?: any): AxiosPromise<GenerationDetail> {
            return localVarFp.generationRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A Pokédex is a handheld electronic encyclopedia device; one which is capable of recording and retaining information of the various Pokémon in a given region with the exception of the national dex and some smaller dexes related to portions of a region. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pokedex) for greater detail.
         * @summary List pokedex
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokedexList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedPokedexSummaryList> {
            return localVarFp.pokedexList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * A Pokédex is a handheld electronic encyclopedia device; one which is capable of recording and retaining information of the various Pokémon in a given region with the exception of the national dex and some smaller dexes related to portions of a region. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pokedex) for greater detail.
         * @summary Get pokedex
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokedexRetrieve(id: string, options?: any): AxiosPromise<PokedexDetail> {
            return localVarFp.pokedexRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Version groups categorize highly similar versions of the games.
         * @summary List version groups
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGroupList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedVersionGroupSummaryList> {
            return localVarFp.versionGroupList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Version groups categorize highly similar versions of the games.
         * @summary Get version group
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGroupRetrieve(id: string, options?: any): AxiosPromise<VersionGroupDetail> {
            return localVarFp.versionGroupRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Versions of the games, e.g., Red, Blue or Yellow.
         * @summary List versions
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedVersionSummaryList> {
            return localVarFp.versionList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Versions of the games, e.g., Red, Blue or Yellow.
         * @summary Get version
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionRetrieve(id: string, options?: any): AxiosPromise<VersionDetail> {
            return localVarFp.versionRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GamesApi - object-oriented interface
 * @export
 * @class GamesApi
 * @extends {BaseAPI}
 */
export class GamesApi extends BaseAPI {
    /**
     * A generation is a grouping of the Pokémon games that separates them based on the Pokémon they include. In each generation, a new set of Pokémon, Moves, Abilities and Types that did not exist in the previous generation are released.
     * @summary List genrations
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public generationList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return GamesApiFp(this.configuration).generationList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A generation is a grouping of the Pokémon games that separates them based on the Pokémon they include. In each generation, a new set of Pokémon, Moves, Abilities and Types that did not exist in the previous generation are released.
     * @summary Get genration
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public generationRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return GamesApiFp(this.configuration).generationRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A Pokédex is a handheld electronic encyclopedia device; one which is capable of recording and retaining information of the various Pokémon in a given region with the exception of the national dex and some smaller dexes related to portions of a region. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pokedex) for greater detail.
     * @summary List pokedex
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public pokedexList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return GamesApiFp(this.configuration).pokedexList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A Pokédex is a handheld electronic encyclopedia device; one which is capable of recording and retaining information of the various Pokémon in a given region with the exception of the national dex and some smaller dexes related to portions of a region. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pokedex) for greater detail.
     * @summary Get pokedex
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public pokedexRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return GamesApiFp(this.configuration).pokedexRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Version groups categorize highly similar versions of the games.
     * @summary List version groups
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public versionGroupList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return GamesApiFp(this.configuration).versionGroupList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Version groups categorize highly similar versions of the games.
     * @summary Get version group
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public versionGroupRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return GamesApiFp(this.configuration).versionGroupRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Versions of the games, e.g., Red, Blue or Yellow.
     * @summary List versions
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public versionList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return GamesApiFp(this.configuration).versionList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Versions of the games, e.g., Red, Blue or Yellow.
     * @summary Get version
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public versionRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return GamesApiFp(this.configuration).versionRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ItemsApi - axios parameter creator
 * @export
 */
export const ItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Item attributes define particular aspects of items, e.g.\"usable in battle\" or \"consumable\".
         * @summary List item attributes
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemAttributeList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/item-attribute/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Item attributes define particular aspects of items, e.g.\"usable in battle\" or \"consumable\".
         * @summary Get item attribute
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemAttributeRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('itemAttributeRetrieve', 'id', id)
            const localVarPath = `/api/v2/item-attribute/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Item categories determine where items will be placed in the players bag.
         * @summary List item categories
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemCategoryList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/item-category/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Item categories determine where items will be placed in the players bag.
         * @summary Get item category
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemCategoryRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('itemCategoryRetrieve', 'id', id)
            const localVarPath = `/api/v2/item-category/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The various effects of the move\"Fling\" when used with different items.
         * @summary List item fling effects
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemFlingEffectList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/item-fling-effect/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The various effects of the move\"Fling\" when used with different items.
         * @summary Get item fling effect
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemFlingEffectRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('itemFlingEffectRetrieve', 'id', id)
            const localVarPath = `/api/v2/item-fling-effect/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * An item is an object in the games which the player can pick up, keep in their bag, and use in some manner. They have various uses, including healing, powering up, helping catch Pokémon, or to access a new area.
         * @summary List items
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/item/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pockets within the players bag used for storing items by category.
         * @summary List item pockets
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemPocketList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/item-pocket/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pockets within the players bag used for storing items by category.
         * @summary Get item pocket
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemPocketRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('itemPocketRetrieve', 'id', id)
            const localVarPath = `/api/v2/item-pocket/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * An item is an object in the games which the player can pick up, keep in their bag, and use in some manner. They have various uses, including healing, powering up, helping catch Pokémon, or to access a new area.
         * @summary Get item
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('itemRetrieve', 'id', id)
            const localVarPath = `/api/v2/item/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemsApi - functional programming interface
 * @export
 */
export const ItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * Item attributes define particular aspects of items, e.g.\"usable in battle\" or \"consumable\".
         * @summary List item attributes
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemAttributeList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedItemAttributeSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemAttributeList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.itemAttributeList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Item attributes define particular aspects of items, e.g.\"usable in battle\" or \"consumable\".
         * @summary Get item attribute
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemAttributeRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemAttributeDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemAttributeRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.itemAttributeRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Item categories determine where items will be placed in the players bag.
         * @summary List item categories
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemCategoryList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedItemCategorySummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemCategoryList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.itemCategoryList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Item categories determine where items will be placed in the players bag.
         * @summary Get item category
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemCategoryRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemCategoryDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemCategoryRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.itemCategoryRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The various effects of the move\"Fling\" when used with different items.
         * @summary List item fling effects
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemFlingEffectList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedItemFlingEffectSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemFlingEffectList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.itemFlingEffectList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The various effects of the move\"Fling\" when used with different items.
         * @summary Get item fling effect
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemFlingEffectRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemFlingEffectDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemFlingEffectRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.itemFlingEffectRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * An item is an object in the games which the player can pick up, keep in their bag, and use in some manner. They have various uses, including healing, powering up, helping catch Pokémon, or to access a new area.
         * @summary List items
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedItemSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.itemList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Pockets within the players bag used for storing items by category.
         * @summary List item pockets
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemPocketList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedItemPocketSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemPocketList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.itemPocketList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Pockets within the players bag used for storing items by category.
         * @summary Get item pocket
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemPocketRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemPocketDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemPocketRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.itemPocketRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * An item is an object in the games which the player can pick up, keep in their bag, and use in some manner. They have various uses, including healing, powering up, helping catch Pokémon, or to access a new area.
         * @summary Get item
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.itemRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ItemsApi - factory interface
 * @export
 */
export const ItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemsApiFp(configuration)
    return {
        /**
         * Item attributes define particular aspects of items, e.g.\"usable in battle\" or \"consumable\".
         * @summary List item attributes
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemAttributeList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedItemAttributeSummaryList> {
            return localVarFp.itemAttributeList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Item attributes define particular aspects of items, e.g.\"usable in battle\" or \"consumable\".
         * @summary Get item attribute
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemAttributeRetrieve(id: string, options?: any): AxiosPromise<ItemAttributeDetail> {
            return localVarFp.itemAttributeRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Item categories determine where items will be placed in the players bag.
         * @summary List item categories
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemCategoryList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedItemCategorySummaryList> {
            return localVarFp.itemCategoryList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Item categories determine where items will be placed in the players bag.
         * @summary Get item category
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemCategoryRetrieve(id: string, options?: any): AxiosPromise<ItemCategoryDetail> {
            return localVarFp.itemCategoryRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * The various effects of the move\"Fling\" when used with different items.
         * @summary List item fling effects
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemFlingEffectList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedItemFlingEffectSummaryList> {
            return localVarFp.itemFlingEffectList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * The various effects of the move\"Fling\" when used with different items.
         * @summary Get item fling effect
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemFlingEffectRetrieve(id: string, options?: any): AxiosPromise<ItemFlingEffectDetail> {
            return localVarFp.itemFlingEffectRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * An item is an object in the games which the player can pick up, keep in their bag, and use in some manner. They have various uses, including healing, powering up, helping catch Pokémon, or to access a new area.
         * @summary List items
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedItemSummaryList> {
            return localVarFp.itemList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Pockets within the players bag used for storing items by category.
         * @summary List item pockets
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemPocketList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedItemPocketSummaryList> {
            return localVarFp.itemPocketList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Pockets within the players bag used for storing items by category.
         * @summary Get item pocket
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemPocketRetrieve(id: string, options?: any): AxiosPromise<ItemPocketDetail> {
            return localVarFp.itemPocketRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * An item is an object in the games which the player can pick up, keep in their bag, and use in some manner. They have various uses, including healing, powering up, helping catch Pokémon, or to access a new area.
         * @summary Get item
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemRetrieve(id: string, options?: any): AxiosPromise<ItemDetail> {
            return localVarFp.itemRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ItemsApi - object-oriented interface
 * @export
 * @class ItemsApi
 * @extends {BaseAPI}
 */
export class ItemsApi extends BaseAPI {
    /**
     * Item attributes define particular aspects of items, e.g.\"usable in battle\" or \"consumable\".
     * @summary List item attributes
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public itemAttributeList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).itemAttributeList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Item attributes define particular aspects of items, e.g.\"usable in battle\" or \"consumable\".
     * @summary Get item attribute
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public itemAttributeRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).itemAttributeRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Item categories determine where items will be placed in the players bag.
     * @summary List item categories
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public itemCategoryList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).itemCategoryList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Item categories determine where items will be placed in the players bag.
     * @summary Get item category
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public itemCategoryRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).itemCategoryRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The various effects of the move\"Fling\" when used with different items.
     * @summary List item fling effects
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public itemFlingEffectList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).itemFlingEffectList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The various effects of the move\"Fling\" when used with different items.
     * @summary Get item fling effect
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public itemFlingEffectRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).itemFlingEffectRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * An item is an object in the games which the player can pick up, keep in their bag, and use in some manner. They have various uses, including healing, powering up, helping catch Pokémon, or to access a new area.
     * @summary List items
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public itemList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).itemList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pockets within the players bag used for storing items by category.
     * @summary List item pockets
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public itemPocketList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).itemPocketList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pockets within the players bag used for storing items by category.
     * @summary Get item pocket
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public itemPocketRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).itemPocketRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * An item is an object in the games which the player can pick up, keep in their bag, and use in some manner. They have various uses, including healing, powering up, helping catch Pokémon, or to access a new area.
     * @summary Get item
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public itemRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).itemRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LocationApi - axios parameter creator
 * @export
 */
export const LocationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Location areas are sections of areas, such as floors in a building or cave. Each area has its own set of possible Pokémon encounters.
         * @summary List location areas
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationAreaList: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/location-area/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Location areas are sections of areas, such as floors in a building or cave. Each area has its own set of possible Pokémon encounters.
         * @summary Get location area
         * @param {number} id A unique integer value identifying this location area.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationAreaRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('locationAreaRetrieve', 'id', id)
            const localVarPath = `/api/v2/location-area/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Locations that can be visited within the games. Locations make up sizable portions of regions, like cities or routes.
         * @summary List locations
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/location/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Locations that can be visited within the games. Locations make up sizable portions of regions, like cities or routes.
         * @summary Get location
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('locationRetrieve', 'id', id)
            const localVarPath = `/api/v2/location/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Areas used for grouping Pokémon encounters in Pal Park. They\'re like habitats that are specific to Pal Park.
         * @summary List pal park areas
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palParkAreaList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/pal-park-area/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Areas used for grouping Pokémon encounters in Pal Park. They\'re like habitats that are specific to Pal Park.
         * @summary Get pal park area
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palParkAreaRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('palParkAreaRetrieve', 'id', id)
            const localVarPath = `/api/v2/pal-park-area/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A region is an organized area of the Pokémon world. Most often, the main difference between regions is the species of Pokémon that can be encountered within them.
         * @summary List regions
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/region/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A region is an organized area of the Pokémon world. Most often, the main difference between regions is the species of Pokémon that can be encountered within them.
         * @summary Get region
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('regionRetrieve', 'id', id)
            const localVarPath = `/api/v2/region/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationApi - functional programming interface
 * @export
 */
export const LocationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocationApiAxiosParamCreator(configuration)
    return {
        /**
         * Location areas are sections of areas, such as floors in a building or cave. Each area has its own set of possible Pokémon encounters.
         * @summary List location areas
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationAreaList(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedLocationAreaSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationAreaList(limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationApi.locationAreaList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Location areas are sections of areas, such as floors in a building or cave. Each area has its own set of possible Pokémon encounters.
         * @summary Get location area
         * @param {number} id A unique integer value identifying this location area.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationAreaRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationAreaDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationAreaRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationApi.locationAreaRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Locations that can be visited within the games. Locations make up sizable portions of regions, like cities or routes.
         * @summary List locations
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedLocationSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationApi.locationList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Locations that can be visited within the games. Locations make up sizable portions of regions, like cities or routes.
         * @summary Get location
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationApi.locationRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Areas used for grouping Pokémon encounters in Pal Park. They\'re like habitats that are specific to Pal Park.
         * @summary List pal park areas
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palParkAreaList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPalParkAreaSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palParkAreaList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationApi.palParkAreaList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Areas used for grouping Pokémon encounters in Pal Park. They\'re like habitats that are specific to Pal Park.
         * @summary Get pal park area
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async palParkAreaRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PalParkAreaDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.palParkAreaRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationApi.palParkAreaRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * A region is an organized area of the Pokémon world. Most often, the main difference between regions is the species of Pokémon that can be encountered within them.
         * @summary List regions
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regionList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedRegionSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.regionList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationApi.regionList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * A region is an organized area of the Pokémon world. Most often, the main difference between regions is the species of Pokémon that can be encountered within them.
         * @summary Get region
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regionRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegionDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.regionRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationApi.regionRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LocationApi - factory interface
 * @export
 */
export const LocationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocationApiFp(configuration)
    return {
        /**
         * Location areas are sections of areas, such as floors in a building or cave. Each area has its own set of possible Pokémon encounters.
         * @summary List location areas
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationAreaList(limit?: number, offset?: number, options?: any): AxiosPromise<PaginatedLocationAreaSummaryList> {
            return localVarFp.locationAreaList(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Location areas are sections of areas, such as floors in a building or cave. Each area has its own set of possible Pokémon encounters.
         * @summary Get location area
         * @param {number} id A unique integer value identifying this location area.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationAreaRetrieve(id: number, options?: any): AxiosPromise<LocationAreaDetail> {
            return localVarFp.locationAreaRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Locations that can be visited within the games. Locations make up sizable portions of regions, like cities or routes.
         * @summary List locations
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedLocationSummaryList> {
            return localVarFp.locationList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Locations that can be visited within the games. Locations make up sizable portions of regions, like cities or routes.
         * @summary Get location
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationRetrieve(id: string, options?: any): AxiosPromise<LocationDetail> {
            return localVarFp.locationRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Areas used for grouping Pokémon encounters in Pal Park. They\'re like habitats that are specific to Pal Park.
         * @summary List pal park areas
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palParkAreaList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedPalParkAreaSummaryList> {
            return localVarFp.palParkAreaList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Areas used for grouping Pokémon encounters in Pal Park. They\'re like habitats that are specific to Pal Park.
         * @summary Get pal park area
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        palParkAreaRetrieve(id: string, options?: any): AxiosPromise<PalParkAreaDetail> {
            return localVarFp.palParkAreaRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A region is an organized area of the Pokémon world. Most often, the main difference between regions is the species of Pokémon that can be encountered within them.
         * @summary List regions
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedRegionSummaryList> {
            return localVarFp.regionList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * A region is an organized area of the Pokémon world. Most often, the main difference between regions is the species of Pokémon that can be encountered within them.
         * @summary Get region
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionRetrieve(id: string, options?: any): AxiosPromise<RegionDetail> {
            return localVarFp.regionRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LocationApi - object-oriented interface
 * @export
 * @class LocationApi
 * @extends {BaseAPI}
 */
export class LocationApi extends BaseAPI {
    /**
     * Location areas are sections of areas, such as floors in a building or cave. Each area has its own set of possible Pokémon encounters.
     * @summary List location areas
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public locationAreaList(limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return LocationApiFp(this.configuration).locationAreaList(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Location areas are sections of areas, such as floors in a building or cave. Each area has its own set of possible Pokémon encounters.
     * @summary Get location area
     * @param {number} id A unique integer value identifying this location area.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public locationAreaRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return LocationApiFp(this.configuration).locationAreaRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Locations that can be visited within the games. Locations make up sizable portions of regions, like cities or routes.
     * @summary List locations
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public locationList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return LocationApiFp(this.configuration).locationList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Locations that can be visited within the games. Locations make up sizable portions of regions, like cities or routes.
     * @summary Get location
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public locationRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return LocationApiFp(this.configuration).locationRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Areas used for grouping Pokémon encounters in Pal Park. They\'re like habitats that are specific to Pal Park.
     * @summary List pal park areas
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public palParkAreaList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return LocationApiFp(this.configuration).palParkAreaList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Areas used for grouping Pokémon encounters in Pal Park. They\'re like habitats that are specific to Pal Park.
     * @summary Get pal park area
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public palParkAreaRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return LocationApiFp(this.configuration).palParkAreaRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A region is an organized area of the Pokémon world. Most often, the main difference between regions is the species of Pokémon that can be encountered within them.
     * @summary List regions
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public regionList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return LocationApiFp(this.configuration).regionList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A region is an organized area of the Pokémon world. Most often, the main difference between regions is the species of Pokémon that can be encountered within them.
     * @summary Get region
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApi
     */
    public regionRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return LocationApiFp(this.configuration).regionRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MachinesApi - axios parameter creator
 * @export
 */
export const MachinesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Machines are the representation of items that teach moves to Pokémon. They vary from version to version, so it is not certain that one specific TM or HM corresponds to a single Machine.
         * @summary List machines
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        machineList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/machine/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Machines are the representation of items that teach moves to Pokémon. They vary from version to version, so it is not certain that one specific TM or HM corresponds to a single Machine.
         * @summary Get machine
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        machineRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('machineRetrieve', 'id', id)
            const localVarPath = `/api/v2/machine/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MachinesApi - functional programming interface
 * @export
 */
export const MachinesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MachinesApiAxiosParamCreator(configuration)
    return {
        /**
         * Machines are the representation of items that teach moves to Pokémon. They vary from version to version, so it is not certain that one specific TM or HM corresponds to a single Machine.
         * @summary List machines
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async machineList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMachineSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.machineList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MachinesApi.machineList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Machines are the representation of items that teach moves to Pokémon. They vary from version to version, so it is not certain that one specific TM or HM corresponds to a single Machine.
         * @summary Get machine
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async machineRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MachineDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.machineRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MachinesApi.machineRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MachinesApi - factory interface
 * @export
 */
export const MachinesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MachinesApiFp(configuration)
    return {
        /**
         * Machines are the representation of items that teach moves to Pokémon. They vary from version to version, so it is not certain that one specific TM or HM corresponds to a single Machine.
         * @summary List machines
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        machineList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedMachineSummaryList> {
            return localVarFp.machineList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Machines are the representation of items that teach moves to Pokémon. They vary from version to version, so it is not certain that one specific TM or HM corresponds to a single Machine.
         * @summary Get machine
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        machineRetrieve(id: string, options?: any): AxiosPromise<MachineDetail> {
            return localVarFp.machineRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MachinesApi - object-oriented interface
 * @export
 * @class MachinesApi
 * @extends {BaseAPI}
 */
export class MachinesApi extends BaseAPI {
    /**
     * Machines are the representation of items that teach moves to Pokémon. They vary from version to version, so it is not certain that one specific TM or HM corresponds to a single Machine.
     * @summary List machines
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachinesApi
     */
    public machineList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return MachinesApiFp(this.configuration).machineList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Machines are the representation of items that teach moves to Pokémon. They vary from version to version, so it is not certain that one specific TM or HM corresponds to a single Machine.
     * @summary Get machine
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachinesApi
     */
    public machineRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return MachinesApiFp(this.configuration).machineRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MovesApi - axios parameter creator
 * @export
 */
export const MovesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Move Ailments are status conditions caused by moves used during battle. See [Bulbapedia](https://bulbapedia.bulbagarden.net/wiki/Status_condition) for greater detail.
         * @summary List move meta ailments
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveAilmentList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/move-ailment/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Move Ailments are status conditions caused by moves used during battle. See [Bulbapedia](https://bulbapedia.bulbagarden.net/wiki/Status_condition) for greater detail.
         * @summary Get move meta ailment
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveAilmentRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('moveAilmentRetrieve', 'id', id)
            const localVarPath = `/api/v2/move-ailment/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Styles of moves when used in the Battle Palace. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Battle_Frontier_(Generation_III)) for greater detail.
         * @summary List move battle styles
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveBattleStyleList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/move-battle-style/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Styles of moves when used in the Battle Palace. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Battle_Frontier_(Generation_III)) for greater detail.
         * @summary Get move battle style
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveBattleStyleRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('moveBattleStyleRetrieve', 'id', id)
            const localVarPath = `/api/v2/move-battle-style/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Very general categories that loosely group move effects.
         * @summary List move meta categories
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveCategoryList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/move-category/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Very general categories that loosely group move effects.
         * @summary Get move meta category
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveCategoryRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('moveCategoryRetrieve', 'id', id)
            const localVarPath = `/api/v2/move-category/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Methods by which Pokémon can learn moves.
         * @summary List move learn methods
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveLearnMethodList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/move-learn-method/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Methods by which Pokémon can learn moves.
         * @summary Get move learn method
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveLearnMethodRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('moveLearnMethodRetrieve', 'id', id)
            const localVarPath = `/api/v2/move-learn-method/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Moves are the skills of Pokémon in battle. In battle, a Pokémon uses one move each turn. Some moves (including those learned by Hidden Machine) can be used outside of battle as well, usually for the purpose of removing obstacles or exploring new areas.
         * @summary List moves
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/move/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Moves are the skills of Pokémon in battle. In battle, a Pokémon uses one move each turn. Some moves (including those learned by Hidden Machine) can be used outside of battle as well, usually for the purpose of removing obstacles or exploring new areas.
         * @summary Get move
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('moveRetrieve', 'id', id)
            const localVarPath = `/api/v2/move/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Targets moves can be directed at during battle. Targets can be Pokémon, environments or even other moves.
         * @summary List move targets
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveTargetList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/move-target/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Targets moves can be directed at during battle. Targets can be Pokémon, environments or even other moves.
         * @summary Get move target
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveTargetRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('moveTargetRetrieve', 'id', id)
            const localVarPath = `/api/v2/move-target/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MovesApi - functional programming interface
 * @export
 */
export const MovesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MovesApiAxiosParamCreator(configuration)
    return {
        /**
         * Move Ailments are status conditions caused by moves used during battle. See [Bulbapedia](https://bulbapedia.bulbagarden.net/wiki/Status_condition) for greater detail.
         * @summary List move meta ailments
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveAilmentList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMoveMetaAilmentSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveAilmentList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MovesApi.moveAilmentList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Move Ailments are status conditions caused by moves used during battle. See [Bulbapedia](https://bulbapedia.bulbagarden.net/wiki/Status_condition) for greater detail.
         * @summary Get move meta ailment
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveAilmentRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MoveMetaAilmentDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveAilmentRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MovesApi.moveAilmentRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Styles of moves when used in the Battle Palace. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Battle_Frontier_(Generation_III)) for greater detail.
         * @summary List move battle styles
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveBattleStyleList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMoveBattleStyleSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveBattleStyleList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MovesApi.moveBattleStyleList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Styles of moves when used in the Battle Palace. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Battle_Frontier_(Generation_III)) for greater detail.
         * @summary Get move battle style
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveBattleStyleRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MoveBattleStyleDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveBattleStyleRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MovesApi.moveBattleStyleRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Very general categories that loosely group move effects.
         * @summary List move meta categories
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveCategoryList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMoveMetaCategorySummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveCategoryList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MovesApi.moveCategoryList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Very general categories that loosely group move effects.
         * @summary Get move meta category
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveCategoryRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MoveMetaCategoryDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveCategoryRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MovesApi.moveCategoryRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Methods by which Pokémon can learn moves.
         * @summary List move learn methods
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveLearnMethodList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMoveLearnMethodSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveLearnMethodList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MovesApi.moveLearnMethodList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Methods by which Pokémon can learn moves.
         * @summary Get move learn method
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveLearnMethodRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MoveLearnMethodDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveLearnMethodRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MovesApi.moveLearnMethodRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Moves are the skills of Pokémon in battle. In battle, a Pokémon uses one move each turn. Some moves (including those learned by Hidden Machine) can be used outside of battle as well, usually for the purpose of removing obstacles or exploring new areas.
         * @summary List moves
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMoveSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MovesApi.moveList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Moves are the skills of Pokémon in battle. In battle, a Pokémon uses one move each turn. Some moves (including those learned by Hidden Machine) can be used outside of battle as well, usually for the purpose of removing obstacles or exploring new areas.
         * @summary Get move
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MoveDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MovesApi.moveRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Targets moves can be directed at during battle. Targets can be Pokémon, environments or even other moves.
         * @summary List move targets
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveTargetList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMoveTargetSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveTargetList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MovesApi.moveTargetList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Targets moves can be directed at during battle. Targets can be Pokémon, environments or even other moves.
         * @summary Get move target
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveTargetRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MoveTargetDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveTargetRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MovesApi.moveTargetRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MovesApi - factory interface
 * @export
 */
export const MovesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MovesApiFp(configuration)
    return {
        /**
         * Move Ailments are status conditions caused by moves used during battle. See [Bulbapedia](https://bulbapedia.bulbagarden.net/wiki/Status_condition) for greater detail.
         * @summary List move meta ailments
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveAilmentList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedMoveMetaAilmentSummaryList> {
            return localVarFp.moveAilmentList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Move Ailments are status conditions caused by moves used during battle. See [Bulbapedia](https://bulbapedia.bulbagarden.net/wiki/Status_condition) for greater detail.
         * @summary Get move meta ailment
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveAilmentRetrieve(id: string, options?: any): AxiosPromise<MoveMetaAilmentDetail> {
            return localVarFp.moveAilmentRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Styles of moves when used in the Battle Palace. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Battle_Frontier_(Generation_III)) for greater detail.
         * @summary List move battle styles
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveBattleStyleList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedMoveBattleStyleSummaryList> {
            return localVarFp.moveBattleStyleList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Styles of moves when used in the Battle Palace. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Battle_Frontier_(Generation_III)) for greater detail.
         * @summary Get move battle style
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveBattleStyleRetrieve(id: string, options?: any): AxiosPromise<MoveBattleStyleDetail> {
            return localVarFp.moveBattleStyleRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Very general categories that loosely group move effects.
         * @summary List move meta categories
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveCategoryList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedMoveMetaCategorySummaryList> {
            return localVarFp.moveCategoryList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Very general categories that loosely group move effects.
         * @summary Get move meta category
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveCategoryRetrieve(id: string, options?: any): AxiosPromise<MoveMetaCategoryDetail> {
            return localVarFp.moveCategoryRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Methods by which Pokémon can learn moves.
         * @summary List move learn methods
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveLearnMethodList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedMoveLearnMethodSummaryList> {
            return localVarFp.moveLearnMethodList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Methods by which Pokémon can learn moves.
         * @summary Get move learn method
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveLearnMethodRetrieve(id: string, options?: any): AxiosPromise<MoveLearnMethodDetail> {
            return localVarFp.moveLearnMethodRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Moves are the skills of Pokémon in battle. In battle, a Pokémon uses one move each turn. Some moves (including those learned by Hidden Machine) can be used outside of battle as well, usually for the purpose of removing obstacles or exploring new areas.
         * @summary List moves
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedMoveSummaryList> {
            return localVarFp.moveList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Moves are the skills of Pokémon in battle. In battle, a Pokémon uses one move each turn. Some moves (including those learned by Hidden Machine) can be used outside of battle as well, usually for the purpose of removing obstacles or exploring new areas.
         * @summary Get move
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveRetrieve(id: string, options?: any): AxiosPromise<MoveDetail> {
            return localVarFp.moveRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Targets moves can be directed at during battle. Targets can be Pokémon, environments or even other moves.
         * @summary List move targets
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveTargetList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedMoveTargetSummaryList> {
            return localVarFp.moveTargetList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Targets moves can be directed at during battle. Targets can be Pokémon, environments or even other moves.
         * @summary Get move target
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveTargetRetrieve(id: string, options?: any): AxiosPromise<MoveTargetDetail> {
            return localVarFp.moveTargetRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MovesApi - object-oriented interface
 * @export
 * @class MovesApi
 * @extends {BaseAPI}
 */
export class MovesApi extends BaseAPI {
    /**
     * Move Ailments are status conditions caused by moves used during battle. See [Bulbapedia](https://bulbapedia.bulbagarden.net/wiki/Status_condition) for greater detail.
     * @summary List move meta ailments
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovesApi
     */
    public moveAilmentList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return MovesApiFp(this.configuration).moveAilmentList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Move Ailments are status conditions caused by moves used during battle. See [Bulbapedia](https://bulbapedia.bulbagarden.net/wiki/Status_condition) for greater detail.
     * @summary Get move meta ailment
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovesApi
     */
    public moveAilmentRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return MovesApiFp(this.configuration).moveAilmentRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Styles of moves when used in the Battle Palace. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Battle_Frontier_(Generation_III)) for greater detail.
     * @summary List move battle styles
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovesApi
     */
    public moveBattleStyleList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return MovesApiFp(this.configuration).moveBattleStyleList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Styles of moves when used in the Battle Palace. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Battle_Frontier_(Generation_III)) for greater detail.
     * @summary Get move battle style
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovesApi
     */
    public moveBattleStyleRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return MovesApiFp(this.configuration).moveBattleStyleRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Very general categories that loosely group move effects.
     * @summary List move meta categories
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovesApi
     */
    public moveCategoryList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return MovesApiFp(this.configuration).moveCategoryList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Very general categories that loosely group move effects.
     * @summary Get move meta category
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovesApi
     */
    public moveCategoryRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return MovesApiFp(this.configuration).moveCategoryRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Methods by which Pokémon can learn moves.
     * @summary List move learn methods
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovesApi
     */
    public moveLearnMethodList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return MovesApiFp(this.configuration).moveLearnMethodList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Methods by which Pokémon can learn moves.
     * @summary Get move learn method
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovesApi
     */
    public moveLearnMethodRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return MovesApiFp(this.configuration).moveLearnMethodRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Moves are the skills of Pokémon in battle. In battle, a Pokémon uses one move each turn. Some moves (including those learned by Hidden Machine) can be used outside of battle as well, usually for the purpose of removing obstacles or exploring new areas.
     * @summary List moves
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovesApi
     */
    public moveList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return MovesApiFp(this.configuration).moveList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Moves are the skills of Pokémon in battle. In battle, a Pokémon uses one move each turn. Some moves (including those learned by Hidden Machine) can be used outside of battle as well, usually for the purpose of removing obstacles or exploring new areas.
     * @summary Get move
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovesApi
     */
    public moveRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return MovesApiFp(this.configuration).moveRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Targets moves can be directed at during battle. Targets can be Pokémon, environments or even other moves.
     * @summary List move targets
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovesApi
     */
    public moveTargetList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return MovesApiFp(this.configuration).moveTargetList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Targets moves can be directed at during battle. Targets can be Pokémon, environments or even other moves.
     * @summary Get move target
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovesApi
     */
    public moveTargetRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return MovesApiFp(this.configuration).moveTargetRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PokemonApi - axios parameter creator
 * @export
 */
export const PokemonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Abilities provide passive effects for Pokémon in battle or in the overworld. Pokémon have multiple possible abilities but can have only one ability at a time. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Ability) for greater detail.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abilityList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/ability/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Abilities provide passive effects for Pokémon in battle or in the overworld. Pokémon have multiple possible abilities but can have only one ability at a time. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Ability) for greater detail.
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abilityRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('abilityRetrieve', 'id', id)
            const localVarPath = `/api/v2/ability/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Characteristics indicate which stat contains a Pokémon\'s highest IV. A Pokémon\'s Characteristic is determined by the remainder of its highest IV divided by 5 (gene_modulo). Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Characteristic) for greater detail.
         * @summary List charecterictics
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        characteristicList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/characteristic/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Characteristics indicate which stat contains a Pokémon\'s highest IV. A Pokémon\'s Characteristic is determined by the remainder of its highest IV divided by 5 (gene_modulo). Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Characteristic) for greater detail.
         * @summary Get characteristic
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        characteristicRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('characteristicRetrieve', 'id', id)
            const localVarPath = `/api/v2/characteristic/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Egg Groups are categories which determine which Pokémon are able to interbreed. Pokémon may belong to either one or two Egg Groups. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Egg_Group) for greater detail.
         * @summary List egg groups
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eggGroupList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/egg-group/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Egg Groups are categories which determine which Pokémon are able to interbreed. Pokémon may belong to either one or two Egg Groups. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Egg_Group) for greater detail.
         * @summary Get egg group
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eggGroupRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eggGroupRetrieve', 'id', id)
            const localVarPath = `/api/v2/egg-group/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Genders were introduced in Generation II for the purposes of breeding Pokémon but can also result in visual differences or even different evolutionary lines. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Gender) for greater detail.
         * @summary List genders
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genderList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/gender/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Genders were introduced in Generation II for the purposes of breeding Pokémon but can also result in visual differences or even different evolutionary lines. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Gender) for greater detail.
         * @summary Get gender
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genderRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('genderRetrieve', 'id', id)
            const localVarPath = `/api/v2/gender/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Growth rates are the speed with which Pokémon gain levels through experience. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Experience) for greater detail.
         * @summary List growth rates
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        growthRateList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/growth-rate/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Growth rates are the speed with which Pokémon gain levels through experience. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Experience) for greater detail.
         * @summary Get growth rate
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        growthRateRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('growthRateRetrieve', 'id', id)
            const localVarPath = `/api/v2/growth-rate/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Damage classes moves can have, e.g. physical, special, or non-damaging.
         * @summary List move damage classes
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveDamageClassList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/move-damage-class/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Damage classes moves can have, e.g. physical, special, or non-damaging.
         * @summary Get move damage class
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveDamageClassRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('moveDamageClassRetrieve', 'id', id)
            const localVarPath = `/api/v2/move-damage-class/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Natures influence how a Pokémon\'s stats grow. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Nature) for greater detail.
         * @summary List natures
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        natureList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/nature/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Natures influence how a Pokémon\'s stats grow. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Nature) for greater detail.
         * @summary Get nature
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        natureRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('natureRetrieve', 'id', id)
            const localVarPath = `/api/v2/nature/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pokeathlon Stats are different attributes of a Pokémon\'s performance in Pokéathlons. In Pokéathlons, competitions happen on different courses; one for each of the different Pokéathlon stats. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pok%C3%A9athlon) for greater detail.
         * @summary List pokeathlon stats
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokeathlonStatList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/pokeathlon-stat/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pokeathlon Stats are different attributes of a Pokémon\'s performance in Pokéathlons. In Pokéathlons, competitions happen on different courses; one for each of the different Pokéathlon stats. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pok%C3%A9athlon) for greater detail.
         * @summary Get pokeathlon stat
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokeathlonStatRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pokeathlonStatRetrieve', 'id', id)
            const localVarPath = `/api/v2/pokeathlon-stat/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Colors used for sorting Pokémon in a Pokédex. The color listed in the Pokédex is usually the color most apparent or covering each Pokémon\'s body. No orange category exists; Pokémon that are primarily orange are listed as red or brown.
         * @summary List pokemon colors
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonColorList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/pokemon-color/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Colors used for sorting Pokémon in a Pokédex. The color listed in the Pokédex is usually the color most apparent or covering each Pokémon\'s body. No orange category exists; Pokémon that are primarily orange are listed as red or brown.
         * @summary Get pokemon color
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonColorRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pokemonColorRetrieve', 'id', id)
            const localVarPath = `/api/v2/pokemon-color/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Some Pokémon may appear in one of multiple, visually different forms. These differences are purely cosmetic. For variations within a Pokémon species, which do differ in more than just visuals, the \'Pokémon\' entity is used to represent such a variety.
         * @summary List pokemon forms
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonFormList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/pokemon-form/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Some Pokémon may appear in one of multiple, visually different forms. These differences are purely cosmetic. For variations within a Pokémon species, which do differ in more than just visuals, the \'Pokémon\' entity is used to represent such a variety.
         * @summary Get pokemon form
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonFormRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pokemonFormRetrieve', 'id', id)
            const localVarPath = `/api/v2/pokemon-form/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Habitats are generally different terrain Pokémon can be found in but can also be areas designated for rare or legendary Pokémon.
         * @summary List pokemom habitas
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonHabitatList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/pokemon-habitat/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Habitats are generally different terrain Pokémon can be found in but can also be areas designated for rare or legendary Pokémon.
         * @summary Get pokemom habita
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonHabitatRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pokemonHabitatRetrieve', 'id', id)
            const localVarPath = `/api/v2/pokemon-habitat/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pokémon are the creatures that inhabit the world of the Pokémon games. They can be caught using Pokéballs and trained by battling with other Pokémon. Each Pokémon belongs to a specific species but may take on a variant which makes it differ from other Pokémon of the same species, such as base stats, available abilities and typings. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pok%C3%A9mon_(species)) for greater detail.
         * @summary List pokemon
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/pokemon/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pokémon are the creatures that inhabit the world of the Pokémon games. They can be caught using Pokéballs and trained by battling with other Pokémon. Each Pokémon belongs to a specific species but may take on a variant which makes it differ from other Pokémon of the same species, such as base stats, available abilities and typings. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pok%C3%A9mon_(species)) for greater detail.
         * @summary Get pokemon
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pokemonRetrieve', 'id', id)
            const localVarPath = `/api/v2/pokemon/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Shapes used for sorting Pokémon in a Pokédex.
         * @summary List pokemon shapes
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonShapeList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/pokemon-shape/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Shapes used for sorting Pokémon in a Pokédex.
         * @summary Get pokemon shape
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonShapeRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pokemonShapeRetrieve', 'id', id)
            const localVarPath = `/api/v2/pokemon-shape/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A Pokémon Species forms the basis for at least one Pokémon. Attributes of a Pokémon species are shared across all varieties of Pokémon within the species. A good example is Wormadam; Wormadam is the species which can be found in three different varieties, Wormadam-Trash, Wormadam-Sandy and Wormadam-Plant.
         * @summary List pokemon species
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonSpeciesList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/pokemon-species/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A Pokémon Species forms the basis for at least one Pokémon. Attributes of a Pokémon species are shared across all varieties of Pokémon within the species. A good example is Wormadam; Wormadam is the species which can be found in three different varieties, Wormadam-Trash, Wormadam-Sandy and Wormadam-Plant.
         * @summary Get pokemon species
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonSpeciesRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pokemonSpeciesRetrieve', 'id', id)
            const localVarPath = `/api/v2/pokemon-species/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stats determine certain aspects of battles. Each Pokémon has a value for each stat which grows as they gain levels and can be altered momentarily by effects in battles.
         * @summary List stats
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/stat/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stats determine certain aspects of battles. Each Pokémon has a value for each stat which grows as they gain levels and can be altered momentarily by effects in battles.
         * @summary Get stat
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('statRetrieve', 'id', id)
            const localVarPath = `/api/v2/stat/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Types are properties for Pokémon and their moves. Each type has three properties: which types of Pokémon it is super effective against, which types of Pokémon it is not very effective against, and which types of Pokémon it is completely ineffective against.
         * @summary List types
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        typeList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/type/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Types are properties for Pokémon and their moves. Each type has three properties: which types of Pokémon it is super effective against, which types of Pokémon it is not very effective against, and which types of Pokémon it is completely ineffective against.
         * @summary Get types
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        typeRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('typeRetrieve', 'id', id)
            const localVarPath = `/api/v2/type/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PokemonApi - functional programming interface
 * @export
 */
export const PokemonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PokemonApiAxiosParamCreator(configuration)
    return {
        /**
         * Abilities provide passive effects for Pokémon in battle or in the overworld. Pokémon have multiple possible abilities but can have only one ability at a time. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Ability) for greater detail.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abilityList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedAbilitySummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.abilityList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.abilityList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Abilities provide passive effects for Pokémon in battle or in the overworld. Pokémon have multiple possible abilities but can have only one ability at a time. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Ability) for greater detail.
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abilityRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AbilityDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.abilityRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.abilityRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Characteristics indicate which stat contains a Pokémon\'s highest IV. A Pokémon\'s Characteristic is determined by the remainder of its highest IV divided by 5 (gene_modulo). Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Characteristic) for greater detail.
         * @summary List charecterictics
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async characteristicList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCharacteristicSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.characteristicList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.characteristicList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Characteristics indicate which stat contains a Pokémon\'s highest IV. A Pokémon\'s Characteristic is determined by the remainder of its highest IV divided by 5 (gene_modulo). Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Characteristic) for greater detail.
         * @summary Get characteristic
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async characteristicRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CharacteristicDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.characteristicRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.characteristicRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Egg Groups are categories which determine which Pokémon are able to interbreed. Pokémon may belong to either one or two Egg Groups. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Egg_Group) for greater detail.
         * @summary List egg groups
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eggGroupList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedEggGroupSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eggGroupList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.eggGroupList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Egg Groups are categories which determine which Pokémon are able to interbreed. Pokémon may belong to either one or two Egg Groups. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Egg_Group) for greater detail.
         * @summary Get egg group
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eggGroupRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EggGroupDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eggGroupRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.eggGroupRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Genders were introduced in Generation II for the purposes of breeding Pokémon but can also result in visual differences or even different evolutionary lines. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Gender) for greater detail.
         * @summary List genders
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async genderList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedGenderSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.genderList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.genderList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Genders were introduced in Generation II for the purposes of breeding Pokémon but can also result in visual differences or even different evolutionary lines. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Gender) for greater detail.
         * @summary Get gender
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async genderRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenderDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.genderRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.genderRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Growth rates are the speed with which Pokémon gain levels through experience. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Experience) for greater detail.
         * @summary List growth rates
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async growthRateList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedGrowthRateSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.growthRateList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.growthRateList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Growth rates are the speed with which Pokémon gain levels through experience. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Experience) for greater detail.
         * @summary Get growth rate
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async growthRateRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrowthRateDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.growthRateRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.growthRateRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Damage classes moves can have, e.g. physical, special, or non-damaging.
         * @summary List move damage classes
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveDamageClassList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMoveDamageClassSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveDamageClassList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.moveDamageClassList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Damage classes moves can have, e.g. physical, special, or non-damaging.
         * @summary Get move damage class
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveDamageClassRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MoveDamageClassDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveDamageClassRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.moveDamageClassRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Natures influence how a Pokémon\'s stats grow. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Nature) for greater detail.
         * @summary List natures
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async natureList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedNatureSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.natureList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.natureList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Natures influence how a Pokémon\'s stats grow. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Nature) for greater detail.
         * @summary Get nature
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async natureRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NatureDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.natureRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.natureRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Pokeathlon Stats are different attributes of a Pokémon\'s performance in Pokéathlons. In Pokéathlons, competitions happen on different courses; one for each of the different Pokéathlon stats. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pok%C3%A9athlon) for greater detail.
         * @summary List pokeathlon stats
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pokeathlonStatList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPokeathlonStatSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pokeathlonStatList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.pokeathlonStatList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Pokeathlon Stats are different attributes of a Pokémon\'s performance in Pokéathlons. In Pokéathlons, competitions happen on different courses; one for each of the different Pokéathlon stats. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pok%C3%A9athlon) for greater detail.
         * @summary Get pokeathlon stat
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pokeathlonStatRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PokeathlonStatDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pokeathlonStatRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.pokeathlonStatRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Colors used for sorting Pokémon in a Pokédex. The color listed in the Pokédex is usually the color most apparent or covering each Pokémon\'s body. No orange category exists; Pokémon that are primarily orange are listed as red or brown.
         * @summary List pokemon colors
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pokemonColorList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPokemonColorSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pokemonColorList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.pokemonColorList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Colors used for sorting Pokémon in a Pokédex. The color listed in the Pokédex is usually the color most apparent or covering each Pokémon\'s body. No orange category exists; Pokémon that are primarily orange are listed as red or brown.
         * @summary Get pokemon color
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pokemonColorRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PokemonColorDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pokemonColorRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.pokemonColorRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Some Pokémon may appear in one of multiple, visually different forms. These differences are purely cosmetic. For variations within a Pokémon species, which do differ in more than just visuals, the \'Pokémon\' entity is used to represent such a variety.
         * @summary List pokemon forms
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pokemonFormList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPokemonFormSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pokemonFormList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.pokemonFormList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Some Pokémon may appear in one of multiple, visually different forms. These differences are purely cosmetic. For variations within a Pokémon species, which do differ in more than just visuals, the \'Pokémon\' entity is used to represent such a variety.
         * @summary Get pokemon form
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pokemonFormRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PokemonFormDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pokemonFormRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.pokemonFormRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Habitats are generally different terrain Pokémon can be found in but can also be areas designated for rare or legendary Pokémon.
         * @summary List pokemom habitas
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pokemonHabitatList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPokemonHabitatSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pokemonHabitatList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.pokemonHabitatList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Habitats are generally different terrain Pokémon can be found in but can also be areas designated for rare or legendary Pokémon.
         * @summary Get pokemom habita
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pokemonHabitatRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PokemonHabitatDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pokemonHabitatRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.pokemonHabitatRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Pokémon are the creatures that inhabit the world of the Pokémon games. They can be caught using Pokéballs and trained by battling with other Pokémon. Each Pokémon belongs to a specific species but may take on a variant which makes it differ from other Pokémon of the same species, such as base stats, available abilities and typings. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pok%C3%A9mon_(species)) for greater detail.
         * @summary List pokemon
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pokemonList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPokemonSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pokemonList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.pokemonList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Pokémon are the creatures that inhabit the world of the Pokémon games. They can be caught using Pokéballs and trained by battling with other Pokémon. Each Pokémon belongs to a specific species but may take on a variant which makes it differ from other Pokémon of the same species, such as base stats, available abilities and typings. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pok%C3%A9mon_(species)) for greater detail.
         * @summary Get pokemon
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pokemonRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PokemonDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pokemonRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.pokemonRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Shapes used for sorting Pokémon in a Pokédex.
         * @summary List pokemon shapes
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pokemonShapeList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPokemonShapeSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pokemonShapeList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.pokemonShapeList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Shapes used for sorting Pokémon in a Pokédex.
         * @summary Get pokemon shape
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pokemonShapeRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PokemonShapeDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pokemonShapeRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.pokemonShapeRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * A Pokémon Species forms the basis for at least one Pokémon. Attributes of a Pokémon species are shared across all varieties of Pokémon within the species. A good example is Wormadam; Wormadam is the species which can be found in three different varieties, Wormadam-Trash, Wormadam-Sandy and Wormadam-Plant.
         * @summary List pokemon species
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pokemonSpeciesList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPokemonSpeciesSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pokemonSpeciesList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.pokemonSpeciesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * A Pokémon Species forms the basis for at least one Pokémon. Attributes of a Pokémon species are shared across all varieties of Pokémon within the species. A good example is Wormadam; Wormadam is the species which can be found in three different varieties, Wormadam-Trash, Wormadam-Sandy and Wormadam-Plant.
         * @summary Get pokemon species
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pokemonSpeciesRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PokemonSpeciesDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pokemonSpeciesRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.pokemonSpeciesRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Stats determine certain aspects of battles. Each Pokémon has a value for each stat which grows as they gain levels and can be altered momentarily by effects in battles.
         * @summary List stats
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedStatSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.statList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Stats determine certain aspects of battles. Each Pokémon has a value for each stat which grows as they gain levels and can be altered momentarily by effects in battles.
         * @summary Get stat
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.statRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Types are properties for Pokémon and their moves. Each type has three properties: which types of Pokémon it is super effective against, which types of Pokémon it is not very effective against, and which types of Pokémon it is completely ineffective against.
         * @summary List types
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async typeList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedTypeSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.typeList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.typeList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Types are properties for Pokémon and their moves. Each type has three properties: which types of Pokémon it is super effective against, which types of Pokémon it is not very effective against, and which types of Pokémon it is completely ineffective against.
         * @summary Get types
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async typeRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TypeDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.typeRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PokemonApi.typeRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PokemonApi - factory interface
 * @export
 */
export const PokemonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PokemonApiFp(configuration)
    return {
        /**
         * Abilities provide passive effects for Pokémon in battle or in the overworld. Pokémon have multiple possible abilities but can have only one ability at a time. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Ability) for greater detail.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abilityList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedAbilitySummaryList> {
            return localVarFp.abilityList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Abilities provide passive effects for Pokémon in battle or in the overworld. Pokémon have multiple possible abilities but can have only one ability at a time. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Ability) for greater detail.
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abilityRetrieve(id: string, options?: any): AxiosPromise<AbilityDetail> {
            return localVarFp.abilityRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Characteristics indicate which stat contains a Pokémon\'s highest IV. A Pokémon\'s Characteristic is determined by the remainder of its highest IV divided by 5 (gene_modulo). Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Characteristic) for greater detail.
         * @summary List charecterictics
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        characteristicList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedCharacteristicSummaryList> {
            return localVarFp.characteristicList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Characteristics indicate which stat contains a Pokémon\'s highest IV. A Pokémon\'s Characteristic is determined by the remainder of its highest IV divided by 5 (gene_modulo). Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Characteristic) for greater detail.
         * @summary Get characteristic
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        characteristicRetrieve(id: string, options?: any): AxiosPromise<CharacteristicDetail> {
            return localVarFp.characteristicRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Egg Groups are categories which determine which Pokémon are able to interbreed. Pokémon may belong to either one or two Egg Groups. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Egg_Group) for greater detail.
         * @summary List egg groups
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eggGroupList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedEggGroupSummaryList> {
            return localVarFp.eggGroupList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Egg Groups are categories which determine which Pokémon are able to interbreed. Pokémon may belong to either one or two Egg Groups. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Egg_Group) for greater detail.
         * @summary Get egg group
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eggGroupRetrieve(id: string, options?: any): AxiosPromise<EggGroupDetail> {
            return localVarFp.eggGroupRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Genders were introduced in Generation II for the purposes of breeding Pokémon but can also result in visual differences or even different evolutionary lines. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Gender) for greater detail.
         * @summary List genders
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genderList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedGenderSummaryList> {
            return localVarFp.genderList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Genders were introduced in Generation II for the purposes of breeding Pokémon but can also result in visual differences or even different evolutionary lines. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Gender) for greater detail.
         * @summary Get gender
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genderRetrieve(id: string, options?: any): AxiosPromise<GenderDetail> {
            return localVarFp.genderRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Growth rates are the speed with which Pokémon gain levels through experience. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Experience) for greater detail.
         * @summary List growth rates
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        growthRateList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedGrowthRateSummaryList> {
            return localVarFp.growthRateList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Growth rates are the speed with which Pokémon gain levels through experience. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Experience) for greater detail.
         * @summary Get growth rate
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        growthRateRetrieve(id: string, options?: any): AxiosPromise<GrowthRateDetail> {
            return localVarFp.growthRateRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Damage classes moves can have, e.g. physical, special, or non-damaging.
         * @summary List move damage classes
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveDamageClassList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedMoveDamageClassSummaryList> {
            return localVarFp.moveDamageClassList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Damage classes moves can have, e.g. physical, special, or non-damaging.
         * @summary Get move damage class
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveDamageClassRetrieve(id: string, options?: any): AxiosPromise<MoveDamageClassDetail> {
            return localVarFp.moveDamageClassRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Natures influence how a Pokémon\'s stats grow. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Nature) for greater detail.
         * @summary List natures
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        natureList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedNatureSummaryList> {
            return localVarFp.natureList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Natures influence how a Pokémon\'s stats grow. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Nature) for greater detail.
         * @summary Get nature
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        natureRetrieve(id: string, options?: any): AxiosPromise<NatureDetail> {
            return localVarFp.natureRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Pokeathlon Stats are different attributes of a Pokémon\'s performance in Pokéathlons. In Pokéathlons, competitions happen on different courses; one for each of the different Pokéathlon stats. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pok%C3%A9athlon) for greater detail.
         * @summary List pokeathlon stats
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokeathlonStatList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedPokeathlonStatSummaryList> {
            return localVarFp.pokeathlonStatList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Pokeathlon Stats are different attributes of a Pokémon\'s performance in Pokéathlons. In Pokéathlons, competitions happen on different courses; one for each of the different Pokéathlon stats. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pok%C3%A9athlon) for greater detail.
         * @summary Get pokeathlon stat
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokeathlonStatRetrieve(id: string, options?: any): AxiosPromise<PokeathlonStatDetail> {
            return localVarFp.pokeathlonStatRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Colors used for sorting Pokémon in a Pokédex. The color listed in the Pokédex is usually the color most apparent or covering each Pokémon\'s body. No orange category exists; Pokémon that are primarily orange are listed as red or brown.
         * @summary List pokemon colors
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonColorList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedPokemonColorSummaryList> {
            return localVarFp.pokemonColorList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Colors used for sorting Pokémon in a Pokédex. The color listed in the Pokédex is usually the color most apparent or covering each Pokémon\'s body. No orange category exists; Pokémon that are primarily orange are listed as red or brown.
         * @summary Get pokemon color
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonColorRetrieve(id: string, options?: any): AxiosPromise<PokemonColorDetail> {
            return localVarFp.pokemonColorRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Some Pokémon may appear in one of multiple, visually different forms. These differences are purely cosmetic. For variations within a Pokémon species, which do differ in more than just visuals, the \'Pokémon\' entity is used to represent such a variety.
         * @summary List pokemon forms
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonFormList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedPokemonFormSummaryList> {
            return localVarFp.pokemonFormList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Some Pokémon may appear in one of multiple, visually different forms. These differences are purely cosmetic. For variations within a Pokémon species, which do differ in more than just visuals, the \'Pokémon\' entity is used to represent such a variety.
         * @summary Get pokemon form
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonFormRetrieve(id: string, options?: any): AxiosPromise<PokemonFormDetail> {
            return localVarFp.pokemonFormRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Habitats are generally different terrain Pokémon can be found in but can also be areas designated for rare or legendary Pokémon.
         * @summary List pokemom habitas
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonHabitatList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedPokemonHabitatSummaryList> {
            return localVarFp.pokemonHabitatList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Habitats are generally different terrain Pokémon can be found in but can also be areas designated for rare or legendary Pokémon.
         * @summary Get pokemom habita
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonHabitatRetrieve(id: string, options?: any): AxiosPromise<PokemonHabitatDetail> {
            return localVarFp.pokemonHabitatRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Pokémon are the creatures that inhabit the world of the Pokémon games. They can be caught using Pokéballs and trained by battling with other Pokémon. Each Pokémon belongs to a specific species but may take on a variant which makes it differ from other Pokémon of the same species, such as base stats, available abilities and typings. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pok%C3%A9mon_(species)) for greater detail.
         * @summary List pokemon
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedPokemonSummaryList> {
            return localVarFp.pokemonList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Pokémon are the creatures that inhabit the world of the Pokémon games. They can be caught using Pokéballs and trained by battling with other Pokémon. Each Pokémon belongs to a specific species but may take on a variant which makes it differ from other Pokémon of the same species, such as base stats, available abilities and typings. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pok%C3%A9mon_(species)) for greater detail.
         * @summary Get pokemon
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonRetrieve(id: string, options?: any): AxiosPromise<PokemonDetail> {
            return localVarFp.pokemonRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Shapes used for sorting Pokémon in a Pokédex.
         * @summary List pokemon shapes
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonShapeList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedPokemonShapeSummaryList> {
            return localVarFp.pokemonShapeList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Shapes used for sorting Pokémon in a Pokédex.
         * @summary Get pokemon shape
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonShapeRetrieve(id: string, options?: any): AxiosPromise<PokemonShapeDetail> {
            return localVarFp.pokemonShapeRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * A Pokémon Species forms the basis for at least one Pokémon. Attributes of a Pokémon species are shared across all varieties of Pokémon within the species. A good example is Wormadam; Wormadam is the species which can be found in three different varieties, Wormadam-Trash, Wormadam-Sandy and Wormadam-Plant.
         * @summary List pokemon species
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonSpeciesList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedPokemonSpeciesSummaryList> {
            return localVarFp.pokemonSpeciesList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * A Pokémon Species forms the basis for at least one Pokémon. Attributes of a Pokémon species are shared across all varieties of Pokémon within the species. A good example is Wormadam; Wormadam is the species which can be found in three different varieties, Wormadam-Trash, Wormadam-Sandy and Wormadam-Plant.
         * @summary Get pokemon species
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pokemonSpeciesRetrieve(id: string, options?: any): AxiosPromise<PokemonSpeciesDetail> {
            return localVarFp.pokemonSpeciesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Stats determine certain aspects of battles. Each Pokémon has a value for each stat which grows as they gain levels and can be altered momentarily by effects in battles.
         * @summary List stats
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedStatSummaryList> {
            return localVarFp.statList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Stats determine certain aspects of battles. Each Pokémon has a value for each stat which grows as they gain levels and can be altered momentarily by effects in battles.
         * @summary Get stat
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statRetrieve(id: string, options?: any): AxiosPromise<StatDetail> {
            return localVarFp.statRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Types are properties for Pokémon and their moves. Each type has three properties: which types of Pokémon it is super effective against, which types of Pokémon it is not very effective against, and which types of Pokémon it is completely ineffective against.
         * @summary List types
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        typeList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedTypeSummaryList> {
            return localVarFp.typeList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Types are properties for Pokémon and their moves. Each type has three properties: which types of Pokémon it is super effective against, which types of Pokémon it is not very effective against, and which types of Pokémon it is completely ineffective against.
         * @summary Get types
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        typeRetrieve(id: string, options?: any): AxiosPromise<TypeDetail> {
            return localVarFp.typeRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PokemonApi - object-oriented interface
 * @export
 * @class PokemonApi
 * @extends {BaseAPI}
 */
export class PokemonApi extends BaseAPI {
    /**
     * Abilities provide passive effects for Pokémon in battle or in the overworld. Pokémon have multiple possible abilities but can have only one ability at a time. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Ability) for greater detail.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public abilityList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).abilityList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Abilities provide passive effects for Pokémon in battle or in the overworld. Pokémon have multiple possible abilities but can have only one ability at a time. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Ability) for greater detail.
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public abilityRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).abilityRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Characteristics indicate which stat contains a Pokémon\'s highest IV. A Pokémon\'s Characteristic is determined by the remainder of its highest IV divided by 5 (gene_modulo). Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Characteristic) for greater detail.
     * @summary List charecterictics
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public characteristicList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).characteristicList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Characteristics indicate which stat contains a Pokémon\'s highest IV. A Pokémon\'s Characteristic is determined by the remainder of its highest IV divided by 5 (gene_modulo). Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Characteristic) for greater detail.
     * @summary Get characteristic
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public characteristicRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).characteristicRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Egg Groups are categories which determine which Pokémon are able to interbreed. Pokémon may belong to either one or two Egg Groups. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Egg_Group) for greater detail.
     * @summary List egg groups
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public eggGroupList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).eggGroupList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Egg Groups are categories which determine which Pokémon are able to interbreed. Pokémon may belong to either one or two Egg Groups. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Egg_Group) for greater detail.
     * @summary Get egg group
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public eggGroupRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).eggGroupRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Genders were introduced in Generation II for the purposes of breeding Pokémon but can also result in visual differences or even different evolutionary lines. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Gender) for greater detail.
     * @summary List genders
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public genderList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).genderList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Genders were introduced in Generation II for the purposes of breeding Pokémon but can also result in visual differences or even different evolutionary lines. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Gender) for greater detail.
     * @summary Get gender
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public genderRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).genderRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Growth rates are the speed with which Pokémon gain levels through experience. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Experience) for greater detail.
     * @summary List growth rates
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public growthRateList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).growthRateList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Growth rates are the speed with which Pokémon gain levels through experience. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Experience) for greater detail.
     * @summary Get growth rate
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public growthRateRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).growthRateRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Damage classes moves can have, e.g. physical, special, or non-damaging.
     * @summary List move damage classes
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public moveDamageClassList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).moveDamageClassList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Damage classes moves can have, e.g. physical, special, or non-damaging.
     * @summary Get move damage class
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public moveDamageClassRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).moveDamageClassRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Natures influence how a Pokémon\'s stats grow. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Nature) for greater detail.
     * @summary List natures
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public natureList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).natureList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Natures influence how a Pokémon\'s stats grow. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Nature) for greater detail.
     * @summary Get nature
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public natureRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).natureRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pokeathlon Stats are different attributes of a Pokémon\'s performance in Pokéathlons. In Pokéathlons, competitions happen on different courses; one for each of the different Pokéathlon stats. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pok%C3%A9athlon) for greater detail.
     * @summary List pokeathlon stats
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public pokeathlonStatList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).pokeathlonStatList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pokeathlon Stats are different attributes of a Pokémon\'s performance in Pokéathlons. In Pokéathlons, competitions happen on different courses; one for each of the different Pokéathlon stats. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pok%C3%A9athlon) for greater detail.
     * @summary Get pokeathlon stat
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public pokeathlonStatRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).pokeathlonStatRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Colors used for sorting Pokémon in a Pokédex. The color listed in the Pokédex is usually the color most apparent or covering each Pokémon\'s body. No orange category exists; Pokémon that are primarily orange are listed as red or brown.
     * @summary List pokemon colors
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public pokemonColorList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).pokemonColorList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Colors used for sorting Pokémon in a Pokédex. The color listed in the Pokédex is usually the color most apparent or covering each Pokémon\'s body. No orange category exists; Pokémon that are primarily orange are listed as red or brown.
     * @summary Get pokemon color
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public pokemonColorRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).pokemonColorRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Some Pokémon may appear in one of multiple, visually different forms. These differences are purely cosmetic. For variations within a Pokémon species, which do differ in more than just visuals, the \'Pokémon\' entity is used to represent such a variety.
     * @summary List pokemon forms
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public pokemonFormList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).pokemonFormList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Some Pokémon may appear in one of multiple, visually different forms. These differences are purely cosmetic. For variations within a Pokémon species, which do differ in more than just visuals, the \'Pokémon\' entity is used to represent such a variety.
     * @summary Get pokemon form
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public pokemonFormRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).pokemonFormRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Habitats are generally different terrain Pokémon can be found in but can also be areas designated for rare or legendary Pokémon.
     * @summary List pokemom habitas
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public pokemonHabitatList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).pokemonHabitatList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Habitats are generally different terrain Pokémon can be found in but can also be areas designated for rare or legendary Pokémon.
     * @summary Get pokemom habita
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public pokemonHabitatRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).pokemonHabitatRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pokémon are the creatures that inhabit the world of the Pokémon games. They can be caught using Pokéballs and trained by battling with other Pokémon. Each Pokémon belongs to a specific species but may take on a variant which makes it differ from other Pokémon of the same species, such as base stats, available abilities and typings. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pok%C3%A9mon_(species)) for greater detail.
     * @summary List pokemon
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public pokemonList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).pokemonList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pokémon are the creatures that inhabit the world of the Pokémon games. They can be caught using Pokéballs and trained by battling with other Pokémon. Each Pokémon belongs to a specific species but may take on a variant which makes it differ from other Pokémon of the same species, such as base stats, available abilities and typings. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Pok%C3%A9mon_(species)) for greater detail.
     * @summary Get pokemon
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public pokemonRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).pokemonRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Shapes used for sorting Pokémon in a Pokédex.
     * @summary List pokemon shapes
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public pokemonShapeList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).pokemonShapeList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Shapes used for sorting Pokémon in a Pokédex.
     * @summary Get pokemon shape
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public pokemonShapeRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).pokemonShapeRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A Pokémon Species forms the basis for at least one Pokémon. Attributes of a Pokémon species are shared across all varieties of Pokémon within the species. A good example is Wormadam; Wormadam is the species which can be found in three different varieties, Wormadam-Trash, Wormadam-Sandy and Wormadam-Plant.
     * @summary List pokemon species
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public pokemonSpeciesList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).pokemonSpeciesList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A Pokémon Species forms the basis for at least one Pokémon. Attributes of a Pokémon species are shared across all varieties of Pokémon within the species. A good example is Wormadam; Wormadam is the species which can be found in three different varieties, Wormadam-Trash, Wormadam-Sandy and Wormadam-Plant.
     * @summary Get pokemon species
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public pokemonSpeciesRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).pokemonSpeciesRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Stats determine certain aspects of battles. Each Pokémon has a value for each stat which grows as they gain levels and can be altered momentarily by effects in battles.
     * @summary List stats
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public statList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).statList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Stats determine certain aspects of battles. Each Pokémon has a value for each stat which grows as they gain levels and can be altered momentarily by effects in battles.
     * @summary Get stat
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public statRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).statRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Types are properties for Pokémon and their moves. Each type has three properties: which types of Pokémon it is super effective against, which types of Pokémon it is not very effective against, and which types of Pokémon it is completely ineffective against.
     * @summary List types
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public typeList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).typeList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Types are properties for Pokémon and their moves. Each type has three properties: which types of Pokémon it is super effective against, which types of Pokémon it is not very effective against, and which types of Pokémon it is completely ineffective against.
     * @summary Get types
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PokemonApi
     */
    public typeRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return PokemonApiFp(this.configuration).typeRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UtilityApi - axios parameter creator
 * @export
 */
export const UtilityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Languages for translations of API resource information.
         * @summary List languages
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languageList: async (limit?: number, offset?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/language/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Languages for translations of API resource information.
         * @summary Get language
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languageRetrieve: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('languageRetrieve', 'id', id)
            const localVarPath = `/api/v2/language/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UtilityApi - functional programming interface
 * @export
 */
export const UtilityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UtilityApiAxiosParamCreator(configuration)
    return {
        /**
         * Languages for translations of API resource information.
         * @summary List languages
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async languageList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedLanguageSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.languageList(limit, offset, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilityApi.languageList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Languages for translations of API resource information.
         * @summary Get language
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async languageRetrieve(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanguageDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.languageRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilityApi.languageRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UtilityApi - factory interface
 * @export
 */
export const UtilityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UtilityApiFp(configuration)
    return {
        /**
         * Languages for translations of API resource information.
         * @summary List languages
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languageList(limit?: number, offset?: number, q?: string, options?: any): AxiosPromise<PaginatedLanguageSummaryList> {
            return localVarFp.languageList(limit, offset, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Languages for translations of API resource information.
         * @summary Get language
         * @param {string} id This parameter can be a string or an integer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        languageRetrieve(id: string, options?: any): AxiosPromise<LanguageDetail> {
            return localVarFp.languageRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UtilityApi - object-oriented interface
 * @export
 * @class UtilityApi
 * @extends {BaseAPI}
 */
export class UtilityApi extends BaseAPI {
    /**
     * Languages for translations of API resource information.
     * @summary List languages
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {string} [q] &gt; Only available locally and not at [pokeapi.co](https://pokeapi.co/docs/v2) Case-insensitive query applied on the &#x60;name&#x60; property. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApi
     */
    public languageList(limit?: number, offset?: number, q?: string, options?: RawAxiosRequestConfig) {
        return UtilityApiFp(this.configuration).languageList(limit, offset, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Languages for translations of API resource information.
     * @summary Get language
     * @param {string} id This parameter can be a string or an integer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApi
     */
    public languageRetrieve(id: string, options?: RawAxiosRequestConfig) {
        return UtilityApiFp(this.configuration).languageRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}



